{"version":3,"sources":["webpack:///webpack/universalModuleDefinition","webpack:///webpack/bootstrap 55a634a612665ecb4143","webpack:///./src/sql-generators.js","webpack:///./src/json2Sql.js","webpack:///./src/index.js","webpack:///./node_modules/squel/dist/squel.js"],"names":["Squel","CreateIndexBlock","directives","column","directive","type","toUpperCase","_buildJoinFor","for","_buildIndexList","indexList","_columnIndex","slice","trim","text","values","list","join","value","joinFor","_isEmpty","val","undefined","cls","Block","SqlGenerators","select","myselect","options","StringBlock","FunctionBlock","DistinctBlock","GetFieldBlock","FromTableBlock","JoinBlock","WhereBlock","GroupByBlock","HavingBlock","OrderByBlock","LimitBlock","OffsetBlock","UnionBlock","tableAliasQuoteCharacter","fieldAliasQuoteCharacter","columns","field","alias","expressionType","expressionOptions","expression","generateCase","filters","params","conditions","condition","conditionExpression","where","parameterName","console","error","groupBy","groupParams","groupParam","length","_addGroupColumns","orderBy","orderParams","orderByParam","_addOrderColumns","paging","limit","limitParam","offset","offSetParam","caseObject","squelCase","case","caseOptions","option","when","then","else","dataSources","dataSets","firstRun","selectSubquery","dataSource","mapParams","dataSet","json2sql","generateSQL","from","table","joinType","right_join","joinCondition","left_join","addIndexDirectives","group","asc","order","forwardedParams","param","paramsToMap","mapping","split","Json2Sql","schema","generate","sources","generateDataSources","generateWhere","generateColumns","generateGroupBy","generateOrderBy","generatePaging","indexDirectives"],"mappings":"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AK;AACL;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,GAAG;AACH;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,iBAAiB,qBAAqB;AACtC;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA,qDAAqD;AACrD;AACA,KAAK;;AAEL;AACA,GAAG;;AAEH;AACA;AACA;;AAEA;AACA;AACA,oBAAoB,OAAO;AAC3B;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA,OAAO;;AAEP,gCAAgC;AAChC;AACA;;AAEA;AACA;AACA;AACA;AACA;;;AAGA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA,KAAK;AACL;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA,WAAW;AACX;AACA;AACA,SAAS;AACT;AACA;;AAEA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;;AAEA;;AAEA,KAAK;AACL;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;;AAEA,KAAK;AACL;AACA;AACA;;AAEA;AACA;AACA,SAAS;AACT;AACA,SAAS;AACT;AACA,SAAS;AACT;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;;AAEA,KAAK;AACL;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA,KAAK;AACL;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA,WAAW;AACX;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;;AAEA;AACA;;AAEA;;AAEA,KAAK;AACL;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA,KAAK;AACL;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA,WAAW;AACX,SAAS;AACT;AACA;AACA;;AAEA;AACA;AACA;;AAEA,KAAK;AACL;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;;;AAGA;AACA;AACA;AACA,WAAW;AACX;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,WAAW;;AAEX;AACA,SAAS;AACT;;AAEA;AACA;AACA,WAAW;AACX;AACA,WAAW;AACX;AACA,WAAW;AACX;AACA;AACA;AACA;;AAEA;AACA;AACA,aAAa;AACb;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA,KAAK;AACL;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA,eAAe;AACf;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA,iBAAiB,OAAO;AACxB,iBAAiB,MAAM;AACvB,iBAAiB,OAAO;AACxB,iBAAiB,QAAQ;AACzB,iBAAiB,QAAQ;AACzB,iBAAiB,QAAQ;AACzB,kBAAkB;AAClB;;AAEA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;;;AAGA;AACA;;AAEA;AACA;AACA;;AAEA;;AAEA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,iBAAiB;;AAEjB;AACA;AACA;AACA,iBAAiB;AACjB,eAAe;AACf;;AAEA;AACA;AACA;AACA;AACA,mBAAmB;;AAEnB;;AAEA;AACA;AACA,mBAAmB;AACnB,iBAAiB;AACjB;;AAEA;AACA;AACA;AACA,aAAa;AACb;AACA;;AAEA;AACA,WAAW;AACX;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,iBAAiB,MAAM;AACvB,iBAAiB,MAAM;AACvB,iBAAiB,OAAO;AACxB,iBAAiB,QAAQ;AACzB,iBAAiB,QAAQ;AACzB,kBAAkB;AAClB;;AAEA,KAAK;AACL;AACA;AACA;;AAEA;AACA;;AAEA,yBAAyB,sBAAsB;AAC/C;AACA;;AAEA;AACA;AACA;AACA,WAAW;AACX;AACA;;AAEA;AACA;AACA;AACA,WAAW;AACX;;AAEA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,iBAAiB,OAAO;AACxB,iBAAiB,QAAQ;AACzB,iBAAiB,QAAQ;AACzB,kBAAkB;AAClB;;AAEA,KAAK;AACL;AACA;AACA;AACA;;AAEA;AACA;AACA,kBAAkB;AAClB;;AAEA,KAAK;AACL;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA,kBAAkB;AAClB;;AAEA,KAAK;AACL;AACA;AACA;;AAEA,6CAA6C;AAC7C;AACA,SAAS;AACT;AACA,KAAK;;AAEL;AACA,GAAG;;AAEH;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;;AAEA;;;AAGA;AACA;AACA;AACA,gGAAgG,eAAe;AAC/G;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA,SAAS;;AAET;AACA;;AAEA;;AAEA,KAAK;AACL;AACA;AACA,gGAAgG,eAAe;AAC/G;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA,SAAS;;AAET;AACA;AACA,KAAK;AACL;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA,uEAAuE,mEAAmE;AAC1I;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,aAAa;AACb;AACA,aAAa;AACb;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA,aAAa;AACb;AACA,SAAS;AACT;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA,WAAW;AACX;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA,KAAK;;AAEL;AACA,GAAG;;AAEH;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;;AAEA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA,iCAAiC;;AAEjC;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,gGAAgG,eAAe;AAC/G;AACA;;AAEA;AACA;AACA;AACA,SAAS;;AAET;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA,KAAK;AACL;AACA;AACA;;AAEA;AACA;AACA,KAAK;AACL;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA,uEAAuE,mEAAmE;AAC1I;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA,aAAa;;AAEb;AACA;AACA;AACA,aAAa;AACb;AACA,SAAS;AACT;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA,WAAW;AACX;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA,SAAS;AACT;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,KAAK;;AAEL;AACA,GAAG;;AAEH;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAGA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA,WAAW;;AAEX;AACA;;AAEA;AACA;AACA,KAAK;;AAEL;AACA,GAAG;;AAEH;AACA;AACA;;AAEA;AACA;;AAEA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,KAAK;;AAEL;AACA,GAAG;;AAEH;AACA;AACA;;AAEA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA,gGAAgG,eAAe;AAC/G;AACA;;AAEA;AACA;AACA,KAAK;AACL;AACA;AACA;;AAEA;AACA;AACA,KAAK;;AAEL;AACA,GAAG;;AAEH;AACA;AACA;;AAEA;AACA,GAAG;;AAEH;AACA;AACA;AACA;AACA;;AAEA;AACA,eAAe,QAAQ;AACvB,eAAe,OAAO;AACtB;AACA;AACA;;AAEA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAGA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA,SAAS;AACT;;AAEA;;AAEA,KAAK;AACL;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA,KAAK;AACL;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA,0EAA0E,mEAAmE;AAC7I;AACA;AACA;;AAEA;;AAEA;;AAEA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;;AAEA;AACA;AACA;AACA,iBAAiB;AACjB,eAAe;AACf;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA,WAAW;AACX;AACA;AACA,WAAW;AACX;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,KAAK;;AAEL;AACA,GAAG;;AAEH;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,KAAK;;AAEL;AACA,GAAG;;AAEH;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA,KAAK;AACL;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA,KAAK;;AAEL;AACA,GAAG;;AAEH;AACA;AACA;;AAEA;AACA;;AAEA,2HAA2H;AAC3H;AACA,OAAO;AACP;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA,KAAK;;AAEL;AACA,GAAG;;AAEH;AACA;AACA;;AAEA;AACA;;AAEA,2HAA2H;AAC3H;AACA;AACA,OAAO;AACP;;AAEA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA,KAAK;;AAEL;AACA,GAAG;;AAEH;AACA;AACA;;AAEA;AACA;;AAEA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAGA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA,qEAAqE,mEAAmE;AACxI;;AAEA;AACA;AACA,WAAW;AACX;AACA;AACA,WAAW;AACX;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,KAAK;AACL;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;;;AAGA;AACA;;AAEA;AACA;AACA;;AAEA;AACA,wEAAwE,mEAAmE;AAC3I;;AAEA;;AAEA;AACA;AACA;;;AAGA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA,eAAe;;AAEf;AACA;AACA;AACA,eAAe;AACf;;AAEA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA,WAAW;AACX;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,KAAK;;AAEL;AACA,GAAG;;AAEH;AACA;AACA;;AAEA;AACA;;AAEA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA,KAAK;AACL;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;;AAEA,KAAK;AACL;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA,KAAK;AACL;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA,uBAAuB,uBAAuB;AAC9C;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,KAAK;;AAEL;AACA,GAAG;;AAEH;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;;;AAGA;AACA;AACA;;AAEA;AACA;;AAEA,uBAAuB,yBAAyB;AAChD;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,WAAW;;AAEX;AACA;AACA;AACA,WAAW;AACX;;AAEA;AACA;AACA;AACA;AACA;AACA,KAAK;;AAEL;AACA,GAAG;;AAEH;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;;AAEA;AACA;;;AAGA;AACA;AACA,SAAS;;AAET;AACA;;AAEA,uBAAuB,yBAAyB;AAChD;;AAEA,yBAAyB,4BAA4B;AACrD;AACA;AACA;AACA,aAAa;;AAEb;AACA;AACA,aAAa;;AAEb;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,KAAK;;AAEL;AACA,GAAG;;AAEH;AACA;AACA;;AAEA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA,SAAS;;AAET;AACA;AACA,KAAK;AACL;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA,WAAW;AACX;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,KAAK;;AAEL;AACA,GAAG;;AAEH;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;;AAEL;AACA,GAAG;;AAEH;AACA;AACA;;AAEA;AACA;;AAEA;;AAEA;AACA;AACA;;AAEA;;;AAGA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,KAAK;;AAEL;AACA,GAAG;;AAEH;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;;AAEA;;AAEA;;AAEA;AACA;AACA,KAAK;;AAEL;AACA,GAAG;;AAEH;AACA;AACA;;AAEA;AACA;;AAEA,2HAA2H;AAC3H;AACA,OAAO;AACP;;AAEA;AACA;AACA;AACA;AACA;AACA;;;AAGA;AACA;AACA;AACA;AACA;AACA,KAAK;;AAEL;AACA,GAAG;;AAEH;AACA;AACA;;AAEA;AACA;;AAEA,2HAA2H;AAC3H;AACA,OAAO;AACP;;AAEA;AACA;AACA;AACA;AACA;AACA;;;AAGA;AACA;AACA;AACA;AACA;AACA,KAAK;;AAEL;AACA,GAAG;;AAEH;AACA;AACA;;AAEA;AACA,eAAe,OAAO;AACtB;AACA;AACA;;AAEA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAGA;AACA;AACA;AACA;;AAEA,gGAAgG,eAAe;AAC/G;AACA;;AAEA;AACA;AACA;AACA,SAAS;AACT;AACA,KAAK;AACL;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA,4EAA4E,mEAAmE;AAC/I;AACA;AACA;;AAEA;AACA;AACA,aAAa;AACb;AACA,aAAa;;AAEb;AACA;AACA;;AAEA;AACA;AACA,aAAa;AACb;AACA,SAAS;AACT;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA,WAAW;AACX;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,KAAK;;AAEL;AACA,GAAG;;AAEH;AACA;AACA;;AAEA;AACA;;AAEA,2HAA2H;AAC3H;AACA,OAAO;AACP;;AAEA;AACA;AACA;AACA,gGAAgG,eAAe;AAC/G;AACA;;AAEA;AACA;AACA,KAAK;;AAEL;AACA,GAAG;;AAEH;AACA;AACA;;AAEA;AACA;;AAEA,2HAA2H;AAC3H;AACA,OAAO;AACP;;AAEA;AACA;AACA;AACA,gGAAgG,eAAe;AAC/G;AACA;;AAEA;AACA;AACA,KAAK;;AAEL;AACA,GAAG;;AAEH;AACA;AACA;;AAEA;AACA;;AAEA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;;AAGA;AACA;AACA;AACA;;AAEA;AACA;AACA,wBAAwB;AACxB,WAAW;AACX,uCAAuC;AACvC;AACA;;AAEA,gGAAgG,eAAe;AAC/G;AACA;;AAEA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA,KAAK;AACL;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA,wEAAwE,mEAAmE;AAC3I;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA,aAAa;;AAEb;AACA;AACA,aAAa;;AAEb;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA,WAAW;AACX;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,KAAK;;AAEL;AACA,GAAG;;AAEH;AACA;AACA;;AAEA;AACA;;AAEA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAGA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA,KAAK;AACL;AACA;AACA;AACA;;AAEA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;;AAEA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;;AAEA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;;AAEA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;;AAEA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;;AAEA;AACA;AACA,KAAK;AACL;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA,yEAAyE,sEAAsE;AAC/I;AACA;AACA;AACA;AACA;;AAEA;;AAEA;;AAEA;AACA;AACA;AACA;AACA,eAAe;;AAEf;AACA;AACA,eAAe;AACf;AACA,aAAa;AACb;AACA;;AAEA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;;AAEA;AACA;AACA;AACA,iBAAiB;AACjB,eAAe;AACf;AACA;AACA,iBAAiB;AACjB;;AAEA;AACA;AACA;AACA,eAAe;AACf;AACA;AACA,SAAS;AACT;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA,WAAW;AACX;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,KAAK;;AAEL;AACA,GAAG;;AAEH;AACA;AACA;;AAEA;AACA;;AAEA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAGA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA,SAAS;AACT;;AAEA;;AAEA,KAAK;AACL;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA,0EAA0E,sEAAsE;AAChJ;AACA;AACA;;AAEA;;AAEA;;AAEA;AACA;AACA;AACA;AACA,eAAe;;AAEf;AACA;AACA;AACA,eAAe;AACf,aAAa;AACb;AACA;;AAEA;AACA;AACA,SAAS;AACT;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA,WAAW;AACX;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,KAAK;;AAEL;AACA,GAAG;;AAEH;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;;AAEA;AACA;AACA;AACA;;AAEA;AACA,0EAA0E,sEAAsE;AAChJ;;AAEA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA,qFAAqF,iBAAiB;AACtG;AACA;;AAEA;;AAEA;AACA;AACA,aAAa;AACb;AACA;AACA,OAAO;AACP;AACA;AACA,OAAO;AACP;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;;;AAGA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,yEAAyE,sEAAsE;AAC/I;;AAEA;AACA;AACA,SAAS;AACT;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA,WAAW;AACX;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA,KAAK;AACL;AACA;AACA,iCAAiC;;AAEjC;AACA;AACA;;AAEA;AACA,yEAAyE,sEAAsE;AAC/I;;AAEA,sCAAsC;AACtC;AACA,SAAS;AACT;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA,WAAW;AACX;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA,KAAK;AACL;AACA;AACA;;AAEA;;AAEA,4BAA4B;;AAE5B;AACA;AACA;AACA;AACA,WAAW;AACX,SAAS;;AAET;AACA;AACA,SAAS;AACT;AACA;AACA,SAAS;;AAET;AACA;AACA,SAAS;;AAET;AACA;AACA;AACA;AACA,WAAW;AACX,SAAS;;AAET;AACA;AACA;;AAEA;AACA,mEAAmE;;AAEnE;AACA;AACA,aAAa;AACb;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;;AAEA,KAAK;AACL;AACA;AACA;AACA;AACA,SAAS;;AAET;AACA;;AAEA;;AAEA,KAAK;AACL;AACA;AACA;AACA;AACA,SAAS;;AAET;AACA;AACA,KAAK;;AAEL;AACA,GAAG;;AAEH;AACA;AACA;;AAEA;AACA;;AAEA;;AAEA;;AAEA;AACA;;AAEA;AACA,GAAG;;AAEH;AACA;AACA;;AAEA;AACA;;AAEA;;AAEA;;AAEA;AACA;;AAEA;AACA,GAAG;;AAEH;AACA;AACA;;AAEA;AACA;;AAEA;;AAEA,sIAAsI;AACtI;AACA,OAAO;;AAEP;AACA;;AAEA;AACA,GAAG;;AAEH;AACA;AACA;;AAEA;AACA;;AAEA;;AAEA;;AAEA;AACA;;AAEA;AACA,GAAG;;AAEH;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA,KAAK;AACL;AACA;AACA,KAAK;AACL;AACA;AACA,KAAK;AACL;AACA;AACA,KAAK;AACL;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA,OAAO;AACP;AACA;AACA,KAAK;AACL;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;;AAEA;AACA;AACA;;AAEA;AACA,GAAG;AACH;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA,GAAG;;AAEH;AACA;AACA;;AAEA;AACA;;AAEA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;;AAEA;AACA;AACA;;AAEA;AACA,OAAO;;AAEP;AACA;;AAEA;AACA;;AAEA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,SAAS;;AAET;AACA,OAAO;;AAEP;AACA;;AAEA;AACA;;AAEA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,SAAS;;AAET;AACA,OAAO;;AAEP;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,SAAS;;AAET;AACA,OAAO;AACP;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA,KAAK;;AAEL;AACA,GAAG;;AAEH;AACA;;AAEA;AACA;;AAEA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;;AAEL;AACA,GAAG;;AAEH;AACA;;AAEA;AACA;;AAEA;;AAEA;AACA;AACA;;AAEA;;;AAGA;AACA;AACA;AACA;;AAEA;AACA;AACA,SAAS;AACT;AACA;AACA,WAAW;AACX;AACA;AACA,KAAK;AACL;AACA;AACA;;AAEA;AACA;;AAEA;;AAEA;AACA;;AAEA;AACA;AACA,KAAK;;AAEL;AACA,GAAG;;AAEH;AACA;;AAEA;AACA;;AAEA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,KAAK;AACL;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA,SAAS;AACT;AACA,KAAK;AACL;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA,6EAA6E,sEAAsE;AACnJ;;AAEA;;AAEA;;AAEA;AACA;AACA;AACA;AACA,WAAW;AACX;AACA;AACA,WAAW;AACX;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,KAAK;;AAEL;AACA,GAAG;;AAEH;AACA;AACA;;AAEA;AACA;;AAEA;;AAEA;;AAEA;;AAEA;AACA;;AAEA;AACA,GAAG;;AAEH;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;;AAEA;;AAEA;AACA;;AAEA;AACA,GAAG;;AAEH;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;;AAEA,sIAAsI,YAAY,oBAAoB,+EAA+E,YAAY,kBAAkB;;AAEnR;AACA;;AAEA;AACA,GAAG;;AAEH;AACA;AACA;;AAEA;AACA;;AAEA;;AAEA;;AAEA;AACA;;AAEA;AACA,GAAG;AACH;;AAEA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;;AAEA;AACA;;AAEA,uBAAuB,yBAAyB;AAChD;;AAEA;;AAEA;;AAEA;;AAEA;AACA;AACA;AACA,WAAW;AACX;AACA;AACA;AACA,aAAa;;AAEb;AACA;AACA;AACA,aAAa;AACb;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,KAAK;;AAEL;AACA,GAAG;;AAEH;AACA;AACA;;AAEA;AACA;;AAEA;;AAEA;;AAEA;AACA;;AAEA;AACA,GAAG;;AAEH;AACA;AACA;;AAEA;AACA;;AAEA;;AAEA;;AAEA;AACA;;AAEA;AACA,GAAG;;AAEH;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,WAAW;AACX;AACA;AACA,KAAK;AACL;AACA;AACA;;AAEA;AACA;;AAEA,uBAAuB,yBAAyB;AAChD;;AAEA;;AAEA;;AAEA;;AAEA;AACA;AACA;AACA,WAAW;AACX;AACA;AACA;AACA,aAAa;;AAEb;AACA;AACA;AACA,aAAa;AACb;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,KAAK;;AAEL;AACA,GAAG;;AAEH;AACA;AACA;;AAEA;AACA;;AAEA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;;;AAGA;AACA;;AAEA;AACA;AACA;;AAEA;AACA,0EAA0E,sEAAsE;AAChJ;;AAEA;;AAEA;AACA;AACA;;;AAGA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA,eAAe;;AAEf;AACA;AACA;AACA,eAAe;AACf;;AAEA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA,WAAW;AACX;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,KAAK;;AAEL;AACA,GAAG;;AAEH;AACA;AACA;;AAEA;AACA;;AAEA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA,2BAA2B,6BAA6B;AACxD;AACA,KAAK;AACL;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA,0EAA0E,sEAAsE;AAChJ;AACA;AACA;;AAEA;AACA;AACA;AACA,aAAa;;AAEb;AACA;AACA;AACA,aAAa;AACb;AACA,SAAS;AACT;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA,WAAW;AACX;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,KAAK;;AAEL;AACA,GAAG;;AAEH;AACA;AACA;;AAEA;AACA;;AAEA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;;AAEA;;AAEA,+EAA+E,iBAAiB;AAChG;AACA;;AAEA;AACA;AACA,SAAS;AACT;AACA,KAAK;AACL;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,KAAK;;AAEL;AACA,GAAG;;AAEH;AACA;AACA;;AAEA;AACA;;AAEA;;AAEA;;AAEA;AACA;;AAEA;AACA,GAAG;;AAEH;AACA;AACA;;AAEA;AACA;;AAEA;;AAEA;;AAEA;AACA;;AAEA;AACA,GAAG;;AAEH;AACA;AACA;;AAEA;AACA;;AAEA;;AAEA;;AAEA;AACA;;AAEA;AACA,GAAG;;AAEH;AACA;AACA;;AAEA;AACA;;AAEA;;AAEA,kKAAkK;AAClK;AACA,OAAO;;AAEP;AACA;;AAEA;AACA,GAAG;AACH;AACA;AACA,CAAC","file":"ampath-json2sql.js","sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine(\"ampath-json2sql\", [], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"ampath-json2sql\"] = factory();\n\telse\n\t\troot[\"ampath-json2sql\"] = factory();\n})(typeof self !== 'undefined' ? self : this, function() {\nreturn \n\n\n// WEBPACK FOOTER //\n// webpack/universalModuleDefinition"," \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, {\n \t\t\t\tconfigurable: false,\n \t\t\t\tenumerable: true,\n \t\t\t\tget: getter\n \t\t\t});\n \t\t}\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 2);\n\n\n\n// WEBPACK FOOTER //\n// webpack/bootstrap 55a634a612665ecb4143","import * as Squel from 'squel';\nimport Json2Sql from './json2Sql.js';\n\nclass CreateIndexBlock extends Squel.cls.Block {\n\n  addIndexDirectives(directives) {\n    let column = '';\n\n    for (const directive of directives) {\n      // eslint-disable-next-line max-len\n      column = column + ` ${directive.type.toUpperCase()} INDEX ${this._buildJoinFor(directive.for)} ${this._buildIndexList(directive.indexList)} ,`;\n    }\n    this._columnIndex = column.slice(0, -1).trim();\n  }\n\n  _toParamString() {\n    return {\n      text: this._columnIndex || '',\n      values: []\n    };\n  }\n\n  _buildIndexList(list) {\n    if (list) {\n      return `(${list.join()})`;\n    }\n    return '';\n\n  }\n\n  _buildJoinFor(value) {\n    let joinFor = '';\n\n    if (!this._isEmpty(value)) {\n      joinFor = `FOR ${value.toUpperCase()}`;\n    }\n    return joinFor;\n  }\n\n  _isEmpty(val) {\n    if (val === undefined) {\n      return true;\n    }\n    if (val === '') {\n      return true;\n    }\n    return false;\n  }\n}\n\nexport default class SqlGenerators {\n  select = null;\n  constructor() {\n    Squel.myselect = function (options) {\n      return Squel.select(options, [\n        new Squel.cls.StringBlock(options, 'SELECT'),\n        new Squel.cls.FunctionBlock(options),\n        new Squel.cls.DistinctBlock(options),\n        new Squel.cls.GetFieldBlock(options),\n        new Squel.cls.FromTableBlock(options),\n        new CreateIndexBlock(options),\n        new Squel.cls.JoinBlock(options),\n        new Squel.cls.WhereBlock(options),\n        new Squel.cls.GroupByBlock(options),\n        new Squel.cls.HavingBlock(options),\n        new Squel.cls.OrderByBlock(options),\n        new Squel.cls.LimitBlock(options),\n        new Squel.cls.OffsetBlock(options),\n        new Squel.cls.UnionBlock(options)\n      ]);\n    };\n    this.select = Squel.myselect({\n      tableAliasQuoteCharacter: '`',\n      fieldAliasQuoteCharacter: '`'\n    });\n  }\n  generateColumns(columns) {\n    for (let column of columns) {\n      if (column.type === 'simple_column') {\n        this.select.field(column.column, column.alias);\n      } else if (column.type === 'derived_column' && column.expressionType === 'simple_expression' &&\n        column.expressionOptions && column.expressionOptions.expression) {\n        this.select.field(column.expressionOptions.expression, column.alias);\n      } else {\n        this.select.field(this.generateCase(column), column.alias);\n      }\n    }\n    return this;\n  }\n  generateWhere(filters, params) {\n    for (let condition of filters.conditions) {\n      if (condition.conditionExpression) {\n        this.select.where(condition.conditionExpression, params[condition.parameterName]);\n      } else {\n        console.error('Where condition not found');\n      }\n    }\n    return this;\n  }\n\n  generateGroupBy(groupBy, params) {\n    let groupParams = params[groupBy.groupParam] || [];\n\n    if (groupParams.length > 0) {\n      this._addGroupColumns(this.select, groupParams);\n      return this;\n    }\n    this._addGroupColumns(this.select, groupBy.columns);\n    return this;\n\n  }\n\n  generateOrderBy(orderBy, params) {\n    let orderParams = params[orderBy.orderByParam] || [];\n\n    if (orderParams.length > 0) {\n      this._addOrderColumns(this.select, orderParams);\n      return this;\n    }\n    this._addOrderColumns(this.select, orderBy.columns);\n    return this;\n\n  }\n\n  generatePaging(paging, params) {\n    if (paging) {\n      let limit = params[paging.limitParam];\n      let offset = params[paging.offSetParam];\n\n      if (limit >= 0) {\n        this.select.limit(limit);\n      }\n      if (offset >= 0) {\n        this.select.offset(offset);\n      }\n    }\n    return this;\n  }\n\n  generateCase(caseObject, params) {\n    let squelCase = Squel.case();\n\n    if (caseObject && caseObject.expressionOptions && caseObject.expressionOptions.caseOptions) {\n      for (let option of caseObject.expressionOptions.caseOptions) {\n        if (!(option.condition && option.condition.toUpperCase() === 'ELSE')) {\n          squelCase.when(option.condition).then(option.value);\n        } else {\n          squelCase.else(option.value);\n        }\n      }\n    }\n    return squelCase;\n  }\n\n  generateDataSources(dataSources, dataSets, params) {\n    let firstRun = true;\n    let selectSubquery = null;\n\n    for (let dataSource of dataSources) {\n      params = SqlGenerators.mapParams(dataSource, params);\n      if (dataSource.dataSet && dataSets) {\n        let json2sql = new Json2Sql(dataSets[dataSource.dataSet], dataSets, params);\n\n        selectSubquery = json2sql.generateSQL();\n      }\n      if (firstRun) {\n        this.select.from(selectSubquery || dataSource.table, dataSource.alias);\n        firstRun = false;\n      }\n      if (!firstRun && dataSource.join) {\n        let joinType = dataSource.join.type.toUpperCase();\n\n        switch (joinType) {\n          case 'RIGHT':\n            this.select.right_join(selectSubquery || dataSource.table, dataSource.alias, dataSource.join.joinCondition);\n            break;\n          case 'LEFT':\n            this.select.left_join(selectSubquery || dataSource.table, dataSource.alias, dataSource.join.joinCondition);\n            break;\n          default:\n            this.select.join(selectSubquery || dataSource.table, dataSource.alias, dataSource.join.joinCondition);\n        }\n      }\n    }\n    return this;\n  }\n\n  addIndexDirectives(directives) {\n    this.select.addIndexDirectives(directives);\n    return this;\n  }\n\n  static mapParams(dataSource, params) {\n    if (dataSource.forwardedParams) {\n      for (const param of dataSource.forwardedParams) {\n\n        let paramsToMap = param.mapping.split(':');\n\n        params[paramsToMap[1]] = params[paramsToMap[0]];\n      }\n    }\n    return params;\n  }\n\n  static mapParamsMultipleDataSources(dataSources, params) {\n    for (const dataSource of dataSources) {\n      SqlGenerators.mapParams(dataSource, params);\n    }\n    return params;\n  }\n\n  _addGroupColumns(select, columns) {\n    for (let column of columns) {\n      select.group(column);\n    }\n  }\n\n  _addOrderColumns(select, columns) {\n    for (let column of columns) {\n      let asc = true;\n\n      if (column.order && column.order.toUpperCase() === 'desc'.toUpperCase()) {\n        asc = false;\n      }\n      select.order(column.column, asc);\n    }\n  }\n}\n\n\n\n// WEBPACK FOOTER //\n// ./src/sql-generators.js","import SqlGenerators from './sql-generators.js';\nexport default class Json2Sql {\n  schema = null;\n  Squel = null;\n  params = null;\n  dataSets = null;\n  constructor(schema, dataSets, params) {\n    this.schema = schema;\n    this.params = params;\n    this.dataSets = dataSets;\n  }\n\n  generateSQL() {\n    let generate = new SqlGenerators();\n\n    if (this.schema && this.schema.sources) {\n      generate.generateDataSources(this.schema.sources, this.dataSets, this.params);\n    }\n\n    if (this.schema && this.schema.filters) {\n      generate.generateWhere(this.schema.filters, this.params);\n    }\n\n    if (this.schema && this.schema.columns) {\n      generate.generateColumns(this.schema.columns);\n    }\n\n    if (this.schema && this.schema.groupBy) {\n      generate.generateGroupBy(this.schema.groupBy, this.params);\n    }\n\n    if (this.schema && this.schema.orderBy) {\n      generate.generateOrderBy(this.schema.orderBy, this.params);\n    }\n\n    if (this.schema && this.schema.paging) {\n      generate.generatePaging(this.schema.paging, this.params);\n    }\n\n    if (this.schema && this.schema.indexDirectives) {\n      generate.addIndexDirectives(this.schema.indexDirectives);\n    }\n    return generate.select;\n  }\n\n}\n\n\n\n// WEBPACK FOOTER //\n// ./src/json2Sql.js","import SqlGenerators from './sql-generators.js';\nimport Json2Sql from './json2Sql.js';\nexport { SqlGenerators, Json2Sql };\n\n\n\n// WEBPACK FOOTER //\n// ./src/index.js",";(function(root, factory) {\n  if (typeof define === 'function' && define.amd) {\n    define([], factory);\n  } else if (typeof exports === 'object') {\n    module.exports = factory();\n  } else {\n    root.squel = factory();\n  }\n}(this, function() {\n'use strict';\n\nvar _get = function get(object, property, receiver) { if (object === null) object = Function.prototype; var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { return get(parent, property, receiver); } } else if (\"value\" in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } };\n\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\nvar _typeof = typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; };\n\nfunction _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self; }\n\nfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\n// append to string if non-empty\nfunction _pad(str, pad) {\n  return str.length ? str + pad : str;\n}\n\n// Extend given object's with other objects' properties, overriding existing ones if necessary\nfunction _extend(dst) {\n  for (var _len = arguments.length, sources = Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {\n    sources[_key - 1] = arguments[_key];\n  }\n\n  if (dst && sources) {\n    var _iteratorNormalCompletion = true;\n    var _didIteratorError = false;\n    var _iteratorError = undefined;\n\n    try {\n      var _loop = function _loop() {\n        var src = _step.value;\n\n        if ((typeof src === 'undefined' ? 'undefined' : _typeof(src)) === 'object') {\n          Object.getOwnPropertyNames(src).forEach(function (key) {\n            dst[key] = src[key];\n          });\n        }\n      };\n\n      for (var _iterator = sources[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {\n        _loop();\n      }\n    } catch (err) {\n      _didIteratorError = true;\n      _iteratorError = err;\n    } finally {\n      try {\n        if (!_iteratorNormalCompletion && _iterator.return) {\n          _iterator.return();\n        }\n      } finally {\n        if (_didIteratorError) {\n          throw _iteratorError;\n        }\n      }\n    }\n  }\n\n  return dst;\n};\n\n// get whether object is a plain object\nfunction _isPlainObject(obj) {\n  return obj && obj.constructor.prototype === Object.prototype;\n};\n\n// get whether object is an array\nfunction _isArray(obj) {\n  return obj && obj.constructor.prototype === Array.prototype;\n};\n\n// clone given item\nfunction _clone(src) {\n  if (!src) {\n    return src;\n  }\n\n  if (typeof src.clone === 'function') {\n    return src.clone();\n  } else if (_isPlainObject(src) || _isArray(src)) {\n    var ret = new src.constructor();\n\n    Object.getOwnPropertyNames(src).forEach(function (key) {\n      if (typeof src[key] !== 'function') {\n        ret[key] = _clone(src[key]);\n      }\n    });\n\n    return ret;\n  } else {\n    return JSON.parse(JSON.stringify(src));\n  }\n};\n\n/**\n * Register a value type handler\n *\n * Note: this will override any existing handler registered for this value type.\n */\nfunction _registerValueHandler(handlers, type, handler) {\n  var typeofType = typeof type === 'undefined' ? 'undefined' : _typeof(type);\n\n  if (typeofType !== 'function' && typeofType !== 'string') {\n    throw new Error(\"type must be a class constructor or string\");\n  }\n\n  if (typeof handler !== 'function') {\n    throw new Error(\"handler must be a function\");\n  }\n\n  var _iteratorNormalCompletion2 = true;\n  var _didIteratorError2 = false;\n  var _iteratorError2 = undefined;\n\n  try {\n    for (var _iterator2 = handlers[Symbol.iterator](), _step2; !(_iteratorNormalCompletion2 = (_step2 = _iterator2.next()).done); _iteratorNormalCompletion2 = true) {\n      var typeHandler = _step2.value;\n\n      if (typeHandler.type === type) {\n        typeHandler.handler = handler;\n\n        return;\n      }\n    }\n  } catch (err) {\n    _didIteratorError2 = true;\n    _iteratorError2 = err;\n  } finally {\n    try {\n      if (!_iteratorNormalCompletion2 && _iterator2.return) {\n        _iterator2.return();\n      }\n    } finally {\n      if (_didIteratorError2) {\n        throw _iteratorError2;\n      }\n    }\n  }\n\n  handlers.push({\n    type: type,\n    handler: handler\n  });\n};\n\n/**\n * Get value type handler for given type\n */\nfunction getValueHandler(value, localHandlers, globalHandlers) {\n  return _getValueHandler(value, localHandlers) || _getValueHandler(value, globalHandlers);\n};\n\nfunction _getValueHandler(value, handlers) {\n  for (var i = 0; i < handlers.length; i++) {\n    var typeHandler = handlers[i];\n    // if type is a string then use `typeof` or else use `instanceof`\n    if ((typeof value === 'undefined' ? 'undefined' : _typeof(value)) === typeHandler.type || typeof typeHandler.type !== 'string' && value instanceof typeHandler.type) {\n      return typeHandler.handler;\n    }\n  }\n};\n\n/**\n * Build base squel classes and methods\n */\nfunction _buildSquel() {\n  var flavour = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : null;\n\n  var cls = {\n    // Get whether obj is a query builder\n    isSquelBuilder: function isSquelBuilder(obj) {\n      return obj && !!obj._toParamString;\n    }\n  };\n\n  // Get whether nesting should be applied for given item\n  var _shouldApplyNesting = function _shouldApplyNesting(obj) {\n    return !cls.isSquelBuilder(obj) || !obj.options.rawNesting;\n  };\n\n  // default query builder options\n  cls.DefaultQueryBuilderOptions = {\n    // If true then table names will be rendered inside quotes. The quote character used is configurable via the nameQuoteCharacter option.\n    autoQuoteTableNames: false,\n    // If true then field names will rendered inside quotes. The quote character used is configurable via the nameQuoteCharacter option.\n    autoQuoteFieldNames: false,\n    // If true then alias names will rendered inside quotes. The quote character used is configurable via the `tableAliasQuoteCharacter` and `fieldAliasQuoteCharacter` options.\n    autoQuoteAliasNames: true,\n    // If true then table alias names will rendered after AS keyword.\n    useAsForTableAliasNames: false,\n    // The quote character used for when quoting table and field names\n    nameQuoteCharacter: '`',\n    // The quote character used for when quoting table alias names\n    tableAliasQuoteCharacter: '`',\n    // The quote character used for when quoting table alias names\n    fieldAliasQuoteCharacter: '\"',\n    // Custom value handlers where key is the value type and the value is the handler function\n    valueHandlers: [],\n    // Character used to represent a parameter value\n    parameterCharacter: '?',\n    // Numbered parameters returned from toParam() as $1, $2, etc.\n    numberedParameters: false,\n    // Numbered parameters prefix character(s)\n    numberedParametersPrefix: '$',\n    // Numbered parameters start at this number.\n    numberedParametersStartAt: 1,\n    // If true then replaces all single quotes within strings. The replacement string used is configurable via the `singleQuoteReplacement` option.\n    replaceSingleQuotes: false,\n    // The string to replace single quotes with in query strings\n    singleQuoteReplacement: '\\'\\'',\n    // String used to join individual blocks in a query when it's stringified\n    separator: ' ',\n    // Function for formatting string values prior to insertion into query string\n    stringFormatter: null,\n    // Whether to prevent the addition of brackets () when nesting this query builder's output\n    rawNesting: false\n  };\n\n  // Global custom value handlers for all instances of builder\n  cls.globalValueHandlers = [];\n\n  /*\n  # ---------------------------------------------------------------------------------------------------------\n  # ---------------------------------------------------------------------------------------------------------\n  # Custom value types\n  # ---------------------------------------------------------------------------------------------------------\n  # ---------------------------------------------------------------------------------------------------------\n   */\n\n  // Register a new value handler\n  cls.registerValueHandler = function (type, handler) {\n    _registerValueHandler(cls.globalValueHandlers, type, handler);\n  };\n\n  /*\n  # ---------------------------------------------------------------------------------------------------------\n  # ---------------------------------------------------------------------------------------------------------\n  # Base classes\n  # ---------------------------------------------------------------------------------------------------------\n  # ---------------------------------------------------------------------------------------------------------\n  */\n\n  // Base class for cloneable builders\n  cls.Cloneable = function () {\n    function _class() {\n      _classCallCheck(this, _class);\n    }\n\n    _createClass(_class, [{\n      key: 'clone',\n\n      /**\n       * Clone this builder\n       */\n      value: function clone() {\n        var newInstance = new this.constructor();\n\n        return _extend(newInstance, _clone(_extend({}, this)));\n      }\n    }]);\n\n    return _class;\n  }();\n\n  // Base class for all builders\n  cls.BaseBuilder = function (_cls$Cloneable) {\n    _inherits(_class2, _cls$Cloneable);\n\n    /**\n     * Constructor.\n     * this.param  {Object} options Overriding one or more of `cls.DefaultQueryBuilderOptions`.\n     */\n    function _class2(options) {\n      _classCallCheck(this, _class2);\n\n      var _this = _possibleConstructorReturn(this, (_class2.__proto__ || Object.getPrototypeOf(_class2)).call(this));\n\n      var defaults = JSON.parse(JSON.stringify(cls.DefaultQueryBuilderOptions));\n      // for function values, etc we need to manually copy\n      ['stringFormatter'].forEach(function (p) {\n        defaults[p] = cls.DefaultQueryBuilderOptions[p];\n      });\n\n      _this.options = _extend({}, defaults, options);\n      return _this;\n    }\n\n    /**\n     * Register a custom value handler for this builder instance.\n     *\n     * Note: this will override any globally registered handler for this value type.\n     */\n\n\n    _createClass(_class2, [{\n      key: 'registerValueHandler',\n      value: function registerValueHandler(type, handler) {\n        _registerValueHandler(this.options.valueHandlers, type, handler);\n        return this;\n      }\n\n      /**\n       * Sanitize given expression.\n       */\n\n    }, {\n      key: '_sanitizeExpression',\n      value: function _sanitizeExpression(expr) {\n        // If it's not a base builder instance\n        if (!cls.isSquelBuilder(expr)) {\n          // It must then be a string\n          if (typeof expr !== \"string\") {\n            throw new Error(\"expression must be a string or builder instance\");\n          }\n        }\n\n        return expr;\n      }\n\n      /**\n       * Sanitize the given name.\n       *\n       * The 'type' parameter is used to construct a meaningful error message in case validation fails.\n       */\n\n    }, {\n      key: '_sanitizeName',\n      value: function _sanitizeName(value, type) {\n        if (typeof value !== \"string\") {\n          throw new Error(type + ' must be a string');\n        }\n\n        return value;\n      }\n    }, {\n      key: '_sanitizeField',\n      value: function _sanitizeField(item) {\n        if (!cls.isSquelBuilder(item)) {\n          item = this._sanitizeName(item, \"field name\");\n        }\n\n        return item;\n      }\n    }, {\n      key: '_sanitizeBaseBuilder',\n      value: function _sanitizeBaseBuilder(item) {\n        if (cls.isSquelBuilder(item)) {\n          return item;\n        }\n\n        throw new Error(\"must be a builder instance\");\n      }\n    }, {\n      key: '_sanitizeTable',\n      value: function _sanitizeTable(item) {\n        if (typeof item !== \"string\") {\n          try {\n            item = this._sanitizeBaseBuilder(item);\n          } catch (e) {\n            throw new Error(\"table name must be a string or a builder\");\n          }\n        } else {\n          item = this._sanitizeName(item, 'table');\n        }\n\n        return item;\n      }\n    }, {\n      key: '_sanitizeTableAlias',\n      value: function _sanitizeTableAlias(item) {\n        return this._sanitizeName(item, \"table alias\");\n      }\n    }, {\n      key: '_sanitizeFieldAlias',\n      value: function _sanitizeFieldAlias(item) {\n        return this._sanitizeName(item, \"field alias\");\n      }\n\n      // Sanitize the given limit/offset value.\n\n    }, {\n      key: '_sanitizeLimitOffset',\n      value: function _sanitizeLimitOffset(value) {\n        value = parseInt(value);\n\n        if (0 > value || isNaN(value)) {\n          throw new Error(\"limit/offset must be >= 0\");\n        }\n\n        return value;\n      }\n\n      // Santize the given field value\n\n    }, {\n      key: '_sanitizeValue',\n      value: function _sanitizeValue(item) {\n        var itemType = typeof item === 'undefined' ? 'undefined' : _typeof(item);\n\n        if (null === item) {\n          // null is allowed\n        } else if (\"string\" === itemType || \"number\" === itemType || \"boolean\" === itemType) {\n          // primitives are allowed\n        } else if (cls.isSquelBuilder(item)) {\n          // Builders allowed\n        } else {\n          var typeIsValid = !!getValueHandler(item, this.options.valueHandlers, cls.globalValueHandlers);\n\n          if (!typeIsValid) {\n            throw new Error(\"field value must be a string, number, boolean, null or one of the registered custom value types\");\n          }\n        }\n\n        return item;\n      }\n\n      // Escape a string value, e.g. escape quotes and other characters within it.\n\n    }, {\n      key: '_escapeValue',\n      value: function _escapeValue(value) {\n        return !this.options.replaceSingleQuotes ? value : value.replace(/\\'/g, this.options.singleQuoteReplacement);\n      }\n    }, {\n      key: '_formatTableName',\n      value: function _formatTableName(item) {\n        if (this.options.autoQuoteTableNames) {\n          var quoteChar = this.options.nameQuoteCharacter;\n\n          item = '' + quoteChar + item + quoteChar;\n        }\n\n        return item;\n      }\n    }, {\n      key: '_formatFieldAlias',\n      value: function _formatFieldAlias(item) {\n        if (this.options.autoQuoteAliasNames) {\n          var quoteChar = this.options.fieldAliasQuoteCharacter;\n\n          item = '' + quoteChar + item + quoteChar;\n        }\n\n        return item;\n      }\n    }, {\n      key: '_formatTableAlias',\n      value: function _formatTableAlias(item) {\n        if (this.options.autoQuoteAliasNames) {\n          var quoteChar = this.options.tableAliasQuoteCharacter;\n\n          item = '' + quoteChar + item + quoteChar;\n        }\n\n        return this.options.useAsForTableAliasNames ? 'AS ' + item : item;\n      }\n    }, {\n      key: '_formatFieldName',\n      value: function _formatFieldName(item) {\n        var formattingOptions = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n\n        if (this.options.autoQuoteFieldNames) {\n          var quoteChar = this.options.nameQuoteCharacter;\n\n          if (formattingOptions.ignorePeriodsForFieldNameQuotes) {\n            // a.b.c -> `a.b.c`\n            item = '' + quoteChar + item + quoteChar;\n          } else {\n            // a.b.c -> `a`.`b`.`c`\n            item = item.split('.').map(function (v) {\n              // treat '*' as special case (#79)\n              return '*' === v ? v : '' + quoteChar + v + quoteChar;\n            }).join('.');\n          }\n        }\n\n        return item;\n      }\n\n      // Format the given custom value\n\n    }, {\n      key: '_formatCustomValue',\n      value: function _formatCustomValue(value, asParam, formattingOptions) {\n        // user defined custom handlers takes precedence\n        var customHandler = getValueHandler(value, this.options.valueHandlers, cls.globalValueHandlers);\n\n        // use the custom handler if available\n        if (customHandler) {\n          value = customHandler(value, asParam, formattingOptions);\n\n          // custom value handler can instruct caller not to process returned value\n          if (value && value.rawNesting) {\n            return {\n              formatted: true,\n              rawNesting: true,\n              value: value.value\n            };\n          }\n        }\n\n        return {\n          formatted: !!customHandler,\n          value: value\n\n        };\n      }\n\n      /**\n       * Format given value for inclusion into parameter values array.\n       */\n\n    }, {\n      key: '_formatValueForParamArray',\n      value: function _formatValueForParamArray(value) {\n        var _this2 = this;\n\n        var formattingOptions = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n\n        if (_isArray(value)) {\n          return value.map(function (v) {\n            return _this2._formatValueForParamArray(v, formattingOptions);\n          });\n        } else {\n          return this._formatCustomValue(value, true, formattingOptions).value;\n        }\n      }\n\n      /**\n       * Format the given field value for inclusion into the query string\n       */\n\n    }, {\n      key: '_formatValueForQueryString',\n      value: function _formatValueForQueryString(initialValue) {\n        var _this3 = this;\n\n        var formattingOptions = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n\n        // maybe we have a cusotm value handler\n        var _formatCustomValue2 = this._formatCustomValue(initialValue, false, formattingOptions),\n            rawNesting = _formatCustomValue2.rawNesting,\n            formatted = _formatCustomValue2.formatted,\n            value = _formatCustomValue2.value;\n\n        // if formatting took place then return it directly\n\n\n        if (formatted) {\n          if (rawNesting) {\n            return value;\n          } else {\n            return this._applyNestingFormatting(value, _shouldApplyNesting(initialValue));\n          }\n        }\n\n        // if it's an array then format each element separately\n        if (_isArray(value)) {\n          value = value.map(function (v) {\n            return _this3._formatValueForQueryString(v);\n          });\n\n          value = this._applyNestingFormatting(value.join(', '), _shouldApplyNesting(value));\n        } else {\n          var typeofValue = typeof value === 'undefined' ? 'undefined' : _typeof(value);\n\n          if (null === value) {\n            value = \"NULL\";\n          } else if (typeofValue === \"boolean\") {\n            value = value ? \"TRUE\" : \"FALSE\";\n          } else if (cls.isSquelBuilder(value)) {\n            value = this._applyNestingFormatting(value.toString(), _shouldApplyNesting(value));\n          } else if (typeofValue !== \"number\") {\n            // if it's a string and we have custom string formatting turned on then use that\n            if ('string' === typeofValue && this.options.stringFormatter) {\n              return this.options.stringFormatter(value);\n            }\n\n            if (formattingOptions.dontQuote) {\n              value = '' + value;\n            } else {\n              var escapedValue = this._escapeValue(value);\n\n              value = '\\'' + escapedValue + '\\'';\n            }\n          }\n        }\n\n        return value;\n      }\n    }, {\n      key: '_applyNestingFormatting',\n      value: function _applyNestingFormatting(str) {\n        var nesting = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;\n\n        if (str && typeof str === 'string' && nesting && !this.options.rawNesting) {\n          // apply brackets if they're not already existing\n          var alreadyHasBrackets = '(' === str.charAt(0) && ')' === str.charAt(str.length - 1);\n\n          if (alreadyHasBrackets) {\n            // check that it's the form \"((x)..(y))\" rather than \"(x)..(y)\"\n            var idx = 0,\n                open = 1;\n\n            while (str.length - 1 > ++idx) {\n              var c = str.charAt(idx);\n\n              if ('(' === c) {\n                open++;\n              } else if (')' === c) {\n                open--;\n                if (1 > open) {\n                  alreadyHasBrackets = false;\n\n                  break;\n                }\n              }\n            }\n          }\n\n          if (!alreadyHasBrackets) {\n            str = '(' + str + ')';\n          }\n        }\n\n        return str;\n      }\n\n      /**\n       * Build given string and its corresponding parameter values into\n       * output.\n       *\n       * @param {String} str\n       * @param {Array}  values\n       * @param {Object} [options] Additional options.\n       * @param {Boolean} [options.buildParameterized] Whether to build paramterized string. Default is false.\n       * @param {Boolean} [options.nested] Whether this expression is nested within another.\n       * @param {Boolean} [options.formattingOptions] Formatting options for values in query string.\n       * @return {Object}\n       */\n\n    }, {\n      key: '_buildString',\n      value: function _buildString(str, values) {\n        var options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n        var nested = options.nested,\n            buildParameterized = options.buildParameterized,\n            formattingOptions = options.formattingOptions;\n\n\n        values = values || [];\n        str = str || '';\n\n        var formattedStr = '',\n            curValue = -1,\n            formattedValues = [];\n\n        var paramChar = this.options.parameterCharacter;\n\n        var idx = 0;\n\n        while (str.length > idx) {\n          // param char?\n          if (str.substr(idx, paramChar.length) === paramChar) {\n            var value = values[++curValue];\n\n            if (buildParameterized) {\n              if (cls.isSquelBuilder(value)) {\n                var ret = value._toParamString({\n                  buildParameterized: buildParameterized,\n                  nested: true\n                });\n\n                formattedStr += ret.text;\n                ret.values.forEach(function (value) {\n                  return formattedValues.push(value);\n                });\n              } else {\n                value = this._formatValueForParamArray(value, formattingOptions);\n\n                if (_isArray(value)) {\n                  // Array(6) -> \"(??, ??, ??, ??, ??, ??)\"\n                  var tmpStr = value.map(function () {\n                    return paramChar;\n                  }).join(', ');\n\n                  formattedStr += '(' + tmpStr + ')';\n\n                  value.forEach(function (val) {\n                    return formattedValues.push(val);\n                  });\n                } else {\n                  formattedStr += paramChar;\n\n                  formattedValues.push(value);\n                }\n              }\n            } else {\n              formattedStr += this._formatValueForQueryString(value, formattingOptions);\n            }\n\n            idx += paramChar.length;\n          } else {\n            formattedStr += str.charAt(idx);\n\n            idx++;\n          }\n        }\n\n        return {\n          text: this._applyNestingFormatting(formattedStr, !!nested),\n          values: formattedValues\n        };\n      }\n\n      /**\n       * Build all given strings and their corresponding parameter values into\n       * output.\n       *\n       * @param {Array} strings\n       * @param {Array}  strValues array of value arrays corresponding to each string.\n       * @param {Object} [options] Additional options.\n       * @param {Boolean} [options.buildParameterized] Whether to build paramterized string. Default is false.\n       * @param {Boolean} [options.nested] Whether this expression is nested within another.\n       * @return {Object}\n       */\n\n    }, {\n      key: '_buildManyStrings',\n      value: function _buildManyStrings(strings, strValues) {\n        var options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n\n        var totalStr = [],\n            totalValues = [];\n\n        for (var idx = 0; strings.length > idx; ++idx) {\n          var inputString = strings[idx],\n              inputValues = strValues[idx];\n\n          var _buildString2 = this._buildString(inputString, inputValues, {\n            buildParameterized: options.buildParameterized,\n            nested: false\n          }),\n              text = _buildString2.text,\n              values = _buildString2.values;\n\n          totalStr.push(text);\n          values.forEach(function (value) {\n            return totalValues.push(value);\n          });\n        }\n\n        totalStr = totalStr.join(this.options.separator);\n\n        return {\n          text: totalStr.length ? this._applyNestingFormatting(totalStr, !!options.nested) : '',\n          values: totalValues\n        };\n      }\n\n      /**\n       * Get parameterized representation of this instance.\n       *\n       * @param {Object} [options] Options.\n       * @param {Boolean} [options.buildParameterized] Whether to build paramterized string. Default is false.\n       * @param {Boolean} [options.nested] Whether this expression is nested within another.\n       * @return {Object}\n       */\n\n    }, {\n      key: '_toParamString',\n      value: function _toParamString(options) {\n        throw new Error('Not yet implemented');\n      }\n\n      /**\n       * Get the expression string.\n       * @return {String}\n       */\n\n    }, {\n      key: 'toString',\n      value: function toString() {\n        var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n\n        return this._toParamString(options).text;\n      }\n\n      /**\n       * Get the parameterized expression string.\n       * @return {Object}\n       */\n\n    }, {\n      key: 'toParam',\n      value: function toParam() {\n        var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n\n        return this._toParamString(_extend({}, options, {\n          buildParameterized: true\n        }));\n      }\n    }]);\n\n    return _class2;\n  }(cls.Cloneable);\n\n  /*\n  # ---------------------------------------------------------------------------------------------------------\n  # ---------------------------------------------------------------------------------------------------------\n  # cls.Expressions\n  # ---------------------------------------------------------------------------------------------------------\n  # ---------------------------------------------------------------------------------------------------------\n  */\n\n  /**\n   * An SQL expression builder.\n   *\n   * SQL expressions are used in WHERE and ON clauses to filter data by various criteria.\n   *\n   * Expressions can be nested. Nested expression contains can themselves\n   * contain nested expressions. When rendered a nested expression will be\n   * fully contained within brackets.\n   *\n   * All the build methods in this object return the object instance for chained method calling purposes.\n   */\n  cls.Expression = function (_cls$BaseBuilder) {\n    _inherits(_class3, _cls$BaseBuilder);\n\n    // Initialise the expression.\n    function _class3(options) {\n      _classCallCheck(this, _class3);\n\n      var _this4 = _possibleConstructorReturn(this, (_class3.__proto__ || Object.getPrototypeOf(_class3)).call(this, options));\n\n      _this4._nodes = [];\n      return _this4;\n    }\n\n    // Combine the current expression with the given expression using the intersection operator (AND).\n\n\n    _createClass(_class3, [{\n      key: 'and',\n      value: function and(expr) {\n        for (var _len2 = arguments.length, params = Array(_len2 > 1 ? _len2 - 1 : 0), _key2 = 1; _key2 < _len2; _key2++) {\n          params[_key2 - 1] = arguments[_key2];\n        }\n\n        expr = this._sanitizeExpression(expr);\n\n        this._nodes.push({\n          type: 'AND',\n          expr: expr,\n          para: params\n        });\n\n        return this;\n      }\n\n      // Combine the current expression with the given expression using the union operator (OR).\n\n    }, {\n      key: 'or',\n      value: function or(expr) {\n        for (var _len3 = arguments.length, params = Array(_len3 > 1 ? _len3 - 1 : 0), _key3 = 1; _key3 < _len3; _key3++) {\n          params[_key3 - 1] = arguments[_key3];\n        }\n\n        expr = this._sanitizeExpression(expr);\n\n        this._nodes.push({\n          type: 'OR',\n          expr: expr,\n          para: params\n        });\n\n        return this;\n      }\n    }, {\n      key: '_toParamString',\n      value: function _toParamString() {\n        var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n\n        var totalStr = [],\n            totalValues = [];\n\n        var _iteratorNormalCompletion3 = true;\n        var _didIteratorError3 = false;\n        var _iteratorError3 = undefined;\n\n        try {\n          for (var _iterator3 = this._nodes[Symbol.iterator](), _step3; !(_iteratorNormalCompletion3 = (_step3 = _iterator3.next()).done); _iteratorNormalCompletion3 = true) {\n            var node = _step3.value;\n            var type = node.type,\n                expr = node.expr,\n                para = node.para;\n\n            var _ref = cls.isSquelBuilder(expr) ? expr._toParamString({\n              buildParameterized: options.buildParameterized,\n              nested: true\n            }) : this._buildString(expr, para, {\n              buildParameterized: options.buildParameterized\n            }),\n                text = _ref.text,\n                values = _ref.values;\n\n            if (totalStr.length) {\n              totalStr.push(type);\n            }\n\n            totalStr.push(text);\n            values.forEach(function (value) {\n              return totalValues.push(value);\n            });\n          }\n        } catch (err) {\n          _didIteratorError3 = true;\n          _iteratorError3 = err;\n        } finally {\n          try {\n            if (!_iteratorNormalCompletion3 && _iterator3.return) {\n              _iterator3.return();\n            }\n          } finally {\n            if (_didIteratorError3) {\n              throw _iteratorError3;\n            }\n          }\n        }\n\n        totalStr = totalStr.join(' ');\n\n        return {\n          text: this._applyNestingFormatting(totalStr, !!options.nested),\n          values: totalValues\n        };\n      }\n    }]);\n\n    return _class3;\n  }(cls.BaseBuilder);\n\n  /*\n  # ---------------------------------------------------------------------------------------------------------\n  # ---------------------------------------------------------------------------------------------------------\n  # cls.Case\n  # ---------------------------------------------------------------------------------------------------------\n  # ---------------------------------------------------------------------------------------------------------\n  */\n\n  /**\n   * An SQL CASE expression builder.\n   *\n   * SQL cases are used to select proper values based on specific criteria.\n   */\n  cls.Case = function (_cls$BaseBuilder2) {\n    _inherits(_class4, _cls$BaseBuilder2);\n\n    function _class4(fieldName) {\n      var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n\n      _classCallCheck(this, _class4);\n\n      var _this5 = _possibleConstructorReturn(this, (_class4.__proto__ || Object.getPrototypeOf(_class4)).call(this, options));\n\n      if (_isPlainObject(fieldName)) {\n        options = fieldName;\n\n        fieldName = null;\n      }\n\n      if (fieldName) {\n        _this5._fieldName = _this5._sanitizeField(fieldName);\n      }\n\n      _this5.options = _extend({}, cls.DefaultQueryBuilderOptions, options);\n\n      _this5._cases = [];\n      _this5._elseValue = null;\n      return _this5;\n    }\n\n    _createClass(_class4, [{\n      key: 'when',\n      value: function when(expression) {\n        for (var _len4 = arguments.length, values = Array(_len4 > 1 ? _len4 - 1 : 0), _key4 = 1; _key4 < _len4; _key4++) {\n          values[_key4 - 1] = arguments[_key4];\n        }\n\n        this._cases.unshift({\n          expression: expression,\n          values: values || []\n        });\n\n        return this;\n      }\n    }, {\n      key: 'then',\n      value: function then(result) {\n        if (this._cases.length == 0) {\n          throw new Error(\"when() needs to be called first\");\n        }\n\n        this._cases[0].result = result;\n\n        return this;\n      }\n    }, {\n      key: 'else',\n      value: function _else(elseValue) {\n        this._elseValue = elseValue;\n\n        return this;\n      }\n    }, {\n      key: '_toParamString',\n      value: function _toParamString() {\n        var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n\n        var totalStr = '',\n            totalValues = [];\n\n        var _iteratorNormalCompletion4 = true;\n        var _didIteratorError4 = false;\n        var _iteratorError4 = undefined;\n\n        try {\n          for (var _iterator4 = this._cases[Symbol.iterator](), _step4; !(_iteratorNormalCompletion4 = (_step4 = _iterator4.next()).done); _iteratorNormalCompletion4 = true) {\n            var _step4$value = _step4.value,\n                expression = _step4$value.expression,\n                _values = _step4$value.values,\n                result = _step4$value.result;\n\n            totalStr = _pad(totalStr, ' ');\n\n            var ret = this._buildString(expression, _values, {\n              buildParameterized: options.buildParameterized,\n              nested: true\n            });\n\n            totalStr += 'WHEN ' + ret.text + ' THEN ' + this._formatValueForQueryString(result);\n            ret.values.forEach(function (value) {\n              return totalValues.push(value);\n            });\n          }\n        } catch (err) {\n          _didIteratorError4 = true;\n          _iteratorError4 = err;\n        } finally {\n          try {\n            if (!_iteratorNormalCompletion4 && _iterator4.return) {\n              _iterator4.return();\n            }\n          } finally {\n            if (_didIteratorError4) {\n              throw _iteratorError4;\n            }\n          }\n        }\n\n        if (totalStr.length) {\n          totalStr += ' ELSE ' + this._formatValueForQueryString(this._elseValue) + ' END';\n\n          if (this._fieldName) {\n            totalStr = this._fieldName + ' ' + totalStr;\n          }\n\n          totalStr = 'CASE ' + totalStr;\n        } else {\n          totalStr = this._formatValueForQueryString(this._elseValue);\n        }\n\n        return {\n          text: totalStr,\n          values: totalValues\n        };\n      }\n    }]);\n\n    return _class4;\n  }(cls.BaseBuilder);\n\n  /*\n  # ---------------------------------------------------------------------------------------------------------\n  # ---------------------------------------------------------------------------------------------------------\n  # Building blocks\n  # ---------------------------------------------------------------------------------------------------------\n  # ---------------------------------------------------------------------------------------------------------\n  */\n\n  /*\n  # A building block represents a single build-step within a query building process.\n  #\n  # Query builders consist of one or more building blocks which get run in a particular order. Building blocks can\n  # optionally specify methods to expose through the query builder interface. They can access all the input data for\n  # the query builder and manipulate it as necessary, as well as append to the final query string output.\n  #\n  # If you wish to customize how queries get built or add proprietary query phrases and content then it is recommended\n  # that you do so using one or more custom building blocks.\n  #\n  # Original idea posted in https://github.com/hiddentao/export/issues/10#issuecomment-15016427\n  */\n  cls.Block = function (_cls$BaseBuilder3) {\n    _inherits(_class5, _cls$BaseBuilder3);\n\n    function _class5(options) {\n      _classCallCheck(this, _class5);\n\n      return _possibleConstructorReturn(this, (_class5.__proto__ || Object.getPrototypeOf(_class5)).call(this, options));\n    }\n\n    /**\n    # Get input methods to expose within the query builder.\n    #\n    # By default all methods except the following get returned:\n    #   methods prefixed with _\n    #   constructor and toString()\n    #\n    # @return Object key -> function pairs\n    */\n\n\n    _createClass(_class5, [{\n      key: 'exposedMethods',\n      value: function exposedMethods() {\n        var ret = {};\n\n        var obj = this;\n\n        while (obj) {\n          Object.getOwnPropertyNames(obj).forEach(function (prop) {\n            if ('constructor' !== prop && typeof obj[prop] === \"function\" && prop.charAt(0) !== '_' && !cls.Block.prototype[prop]) {\n              ret[prop] = obj[prop];\n            }\n          });\n\n          obj = Object.getPrototypeOf(obj);\n        };\n\n        return ret;\n      }\n    }]);\n\n    return _class5;\n  }(cls.BaseBuilder);\n\n  // A fixed string which always gets output\n  cls.StringBlock = function (_cls$Block) {\n    _inherits(_class6, _cls$Block);\n\n    function _class6(options, str) {\n      _classCallCheck(this, _class6);\n\n      var _this7 = _possibleConstructorReturn(this, (_class6.__proto__ || Object.getPrototypeOf(_class6)).call(this, options));\n\n      _this7._str = str;\n      return _this7;\n    }\n\n    _createClass(_class6, [{\n      key: '_toParamString',\n      value: function _toParamString() {\n        var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n\n        return {\n          text: this._str,\n          values: []\n        };\n      }\n    }]);\n\n    return _class6;\n  }(cls.Block);\n\n  // A function string block\n  cls.FunctionBlock = function (_cls$Block2) {\n    _inherits(_class7, _cls$Block2);\n\n    function _class7(options) {\n      _classCallCheck(this, _class7);\n\n      var _this8 = _possibleConstructorReturn(this, (_class7.__proto__ || Object.getPrototypeOf(_class7)).call(this, options));\n\n      _this8._strings = [];\n      _this8._values = [];\n      return _this8;\n    }\n\n    _createClass(_class7, [{\n      key: 'function',\n      value: function _function(str) {\n        this._strings.push(str);\n\n        for (var _len5 = arguments.length, values = Array(_len5 > 1 ? _len5 - 1 : 0), _key5 = 1; _key5 < _len5; _key5++) {\n          values[_key5 - 1] = arguments[_key5];\n        }\n\n        this._values.push(values);\n      }\n    }, {\n      key: '_toParamString',\n      value: function _toParamString() {\n        var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n\n        return this._buildManyStrings(this._strings, this._values, options);\n      }\n    }]);\n\n    return _class7;\n  }(cls.Block);\n\n  // value handler for FunctionValueBlock objects\n  cls.registerValueHandler(cls.FunctionBlock, function (value) {\n    var asParam = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\n\n    return asParam ? value.toParam() : value.toString();\n  });\n\n  /*\n  # Table specifier base class\n  */\n  cls.AbstractTableBlock = function (_cls$Block3) {\n    _inherits(_class8, _cls$Block3);\n\n    /**\n     * @param {Boolean} [options.singleTable] If true then only allow one table spec.\n     * @param {String} [options.prefix] String prefix for output.\n     */\n    function _class8(options, prefix) {\n      _classCallCheck(this, _class8);\n\n      var _this9 = _possibleConstructorReturn(this, (_class8.__proto__ || Object.getPrototypeOf(_class8)).call(this, options));\n\n      _this9._tables = [];\n      return _this9;\n    }\n\n    /**\n    # Update given table.\n    #\n    # An alias may also be specified for the table.\n    #\n    # Concrete subclasses should provide a method which calls this\n    */\n\n\n    _createClass(_class8, [{\n      key: '_table',\n      value: function _table(table) {\n        var alias = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;\n\n        alias = alias ? this._sanitizeTableAlias(alias) : alias;\n        table = this._sanitizeTable(table);\n\n        if (this.options.singleTable) {\n          this._tables = [];\n        }\n\n        this._tables.push({\n          table: table,\n          alias: alias\n        });\n      }\n\n      // get whether a table has been set\n\n    }, {\n      key: '_hasTable',\n      value: function _hasTable() {\n        return 0 < this._tables.length;\n      }\n\n      /**\n       * @override\n       */\n\n    }, {\n      key: '_toParamString',\n      value: function _toParamString() {\n        var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n\n        var totalStr = '',\n            totalValues = [];\n\n        if (this._hasTable()) {\n          // retrieve the parameterised queries\n          var _iteratorNormalCompletion5 = true;\n          var _didIteratorError5 = false;\n          var _iteratorError5 = undefined;\n\n          try {\n            for (var _iterator5 = this._tables[Symbol.iterator](), _step5; !(_iteratorNormalCompletion5 = (_step5 = _iterator5.next()).done); _iteratorNormalCompletion5 = true) {\n              var _step5$value = _step5.value,\n                  table = _step5$value.table,\n                  alias = _step5$value.alias;\n\n              totalStr = _pad(totalStr, ', ');\n\n              var tableStr = void 0;\n\n              if (cls.isSquelBuilder(table)) {\n                var _table$_toParamString = table._toParamString({\n                  buildParameterized: options.buildParameterized,\n                  nested: true\n                }),\n                    text = _table$_toParamString.text,\n                    values = _table$_toParamString.values;\n\n                tableStr = text;\n                values.forEach(function (value) {\n                  return totalValues.push(value);\n                });\n              } else {\n                tableStr = this._formatTableName(table);\n              }\n\n              if (alias) {\n                tableStr += ' ' + this._formatTableAlias(alias);\n              }\n\n              totalStr += tableStr;\n            }\n          } catch (err) {\n            _didIteratorError5 = true;\n            _iteratorError5 = err;\n          } finally {\n            try {\n              if (!_iteratorNormalCompletion5 && _iterator5.return) {\n                _iterator5.return();\n              }\n            } finally {\n              if (_didIteratorError5) {\n                throw _iteratorError5;\n              }\n            }\n          }\n\n          if (this.options.prefix) {\n            totalStr = this.options.prefix + ' ' + totalStr;\n          }\n        }\n\n        return {\n          text: totalStr,\n          values: totalValues\n        };\n      }\n    }]);\n\n    return _class8;\n  }(cls.Block);\n\n  // target table for DELETE queries, DELETE <??> FROM\n  cls.TargetTableBlock = function (_cls$AbstractTableBlo) {\n    _inherits(_class9, _cls$AbstractTableBlo);\n\n    function _class9() {\n      _classCallCheck(this, _class9);\n\n      return _possibleConstructorReturn(this, (_class9.__proto__ || Object.getPrototypeOf(_class9)).apply(this, arguments));\n    }\n\n    _createClass(_class9, [{\n      key: 'target',\n      value: function target(table) {\n        this._table(table);\n      }\n    }]);\n\n    return _class9;\n  }(cls.AbstractTableBlock);\n\n  // Update Table\n  cls.UpdateTableBlock = function (_cls$AbstractTableBlo2) {\n    _inherits(_class10, _cls$AbstractTableBlo2);\n\n    function _class10() {\n      _classCallCheck(this, _class10);\n\n      return _possibleConstructorReturn(this, (_class10.__proto__ || Object.getPrototypeOf(_class10)).apply(this, arguments));\n    }\n\n    _createClass(_class10, [{\n      key: 'table',\n      value: function table(_table2) {\n        var alias = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;\n\n        this._table(_table2, alias);\n      }\n    }, {\n      key: '_toParamString',\n      value: function _toParamString() {\n        var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n\n        if (!this._hasTable()) {\n          throw new Error(\"table() needs to be called\");\n        }\n\n        return _get(_class10.prototype.__proto__ || Object.getPrototypeOf(_class10.prototype), '_toParamString', this).call(this, options);\n      }\n    }]);\n\n    return _class10;\n  }(cls.AbstractTableBlock);\n\n  // FROM table\n  cls.FromTableBlock = function (_cls$AbstractTableBlo3) {\n    _inherits(_class11, _cls$AbstractTableBlo3);\n\n    function _class11(options) {\n      _classCallCheck(this, _class11);\n\n      return _possibleConstructorReturn(this, (_class11.__proto__ || Object.getPrototypeOf(_class11)).call(this, _extend({}, options, {\n        prefix: 'FROM'\n      })));\n    }\n\n    _createClass(_class11, [{\n      key: 'from',\n      value: function from(table) {\n        var alias = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;\n\n        this._table(table, alias);\n      }\n    }]);\n\n    return _class11;\n  }(cls.AbstractTableBlock);\n\n  // INTO table\n  cls.IntoTableBlock = function (_cls$AbstractTableBlo4) {\n    _inherits(_class12, _cls$AbstractTableBlo4);\n\n    function _class12(options) {\n      _classCallCheck(this, _class12);\n\n      return _possibleConstructorReturn(this, (_class12.__proto__ || Object.getPrototypeOf(_class12)).call(this, _extend({}, options, {\n        prefix: 'INTO',\n        singleTable: true\n      })));\n    }\n\n    _createClass(_class12, [{\n      key: 'into',\n      value: function into(table) {\n        this._table(table);\n      }\n    }, {\n      key: '_toParamString',\n      value: function _toParamString() {\n        var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n\n        if (!this._hasTable()) {\n          throw new Error(\"into() needs to be called\");\n        }\n\n        return _get(_class12.prototype.__proto__ || Object.getPrototypeOf(_class12.prototype), '_toParamString', this).call(this, options);\n      }\n    }]);\n\n    return _class12;\n  }(cls.AbstractTableBlock);\n\n  // (SELECT) Get field\n  cls.GetFieldBlock = function (_cls$Block4) {\n    _inherits(_class13, _cls$Block4);\n\n    function _class13(options) {\n      _classCallCheck(this, _class13);\n\n      var _this14 = _possibleConstructorReturn(this, (_class13.__proto__ || Object.getPrototypeOf(_class13)).call(this, options));\n\n      _this14._fields = [];\n      return _this14;\n    }\n\n    /**\n    # Add the given fields to the final result set.\n    #\n    # The parameter is an Object containing field names (or database functions) as the keys and aliases for the fields\n    # as the values. If the value for a key is null then no alias is set for that field.\n    #\n    # Internally this method simply calls the field() method of this block to add each individual field.\n    #\n    # options.ignorePeriodsForFieldNameQuotes - whether to ignore period (.) when automatically quoting the field name\n    */\n\n\n    _createClass(_class13, [{\n      key: 'fields',\n      value: function fields(_fields) {\n        var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n\n        if (_isArray(_fields)) {\n          var _iteratorNormalCompletion6 = true;\n          var _didIteratorError6 = false;\n          var _iteratorError6 = undefined;\n\n          try {\n            for (var _iterator6 = _fields[Symbol.iterator](), _step6; !(_iteratorNormalCompletion6 = (_step6 = _iterator6.next()).done); _iteratorNormalCompletion6 = true) {\n              var field = _step6.value;\n\n              this.field(field, null, options);\n            }\n          } catch (err) {\n            _didIteratorError6 = true;\n            _iteratorError6 = err;\n          } finally {\n            try {\n              if (!_iteratorNormalCompletion6 && _iterator6.return) {\n                _iterator6.return();\n              }\n            } finally {\n              if (_didIteratorError6) {\n                throw _iteratorError6;\n              }\n            }\n          }\n        } else {\n          for (var _field2 in _fields) {\n            var alias = _fields[_field2];\n\n            this.field(_field2, alias, options);\n          }\n        }\n      }\n\n      /**\n      # Add the given field to the final result set.\n      #\n      # The 'field' parameter does not necessarily have to be a fieldname. It can use database functions too,\n      # e.g. DATE_FORMAT(a.started, \"%H\")\n      #\n      # An alias may also be specified for this field.\n      #\n      # options.ignorePeriodsForFieldNameQuotes - whether to ignore period (.) when automatically quoting the field name\n      */\n\n    }, {\n      key: 'field',\n      value: function field(_field) {\n        var alias = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;\n        var options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n\n        alias = alias ? this._sanitizeFieldAlias(alias) : alias;\n        _field = this._sanitizeField(_field);\n\n        // if field-alias combo already present then don't add\n        var existingField = this._fields.filter(function (f) {\n          return f.name === _field && f.alias === alias;\n        });\n        if (existingField.length) {\n          return this;\n        }\n\n        this._fields.push({\n          name: _field,\n          alias: alias,\n          options: options\n        });\n      }\n    }, {\n      key: '_toParamString',\n      value: function _toParamString() {\n        var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n        var queryBuilder = options.queryBuilder,\n            buildParameterized = options.buildParameterized;\n\n\n        var totalStr = '',\n            totalValues = [];\n\n        var _iteratorNormalCompletion7 = true;\n        var _didIteratorError7 = false;\n        var _iteratorError7 = undefined;\n\n        try {\n          for (var _iterator7 = this._fields[Symbol.iterator](), _step7; !(_iteratorNormalCompletion7 = (_step7 = _iterator7.next()).done); _iteratorNormalCompletion7 = true) {\n            var field = _step7.value;\n\n            totalStr = _pad(totalStr, \", \");\n\n            var name = field.name,\n                alias = field.alias,\n                _options = field.options;\n\n\n            if (typeof name === 'string') {\n              totalStr += this._formatFieldName(name, _options);\n            } else {\n              var ret = name._toParamString({\n                nested: true,\n                buildParameterized: buildParameterized\n              });\n\n              totalStr += ret.text;\n              ret.values.forEach(function (value) {\n                return totalValues.push(value);\n              });\n            }\n\n            if (alias) {\n              totalStr += ' AS ' + this._formatFieldAlias(alias);\n            }\n          }\n        } catch (err) {\n          _didIteratorError7 = true;\n          _iteratorError7 = err;\n        } finally {\n          try {\n            if (!_iteratorNormalCompletion7 && _iterator7.return) {\n              _iterator7.return();\n            }\n          } finally {\n            if (_didIteratorError7) {\n              throw _iteratorError7;\n            }\n          }\n        }\n\n        if (!totalStr.length) {\n          // if select query and a table is set then all fields wanted\n          var fromTableBlock = queryBuilder && queryBuilder.getBlock(cls.FromTableBlock);\n          if (fromTableBlock && fromTableBlock._hasTable()) {\n            totalStr = \"*\";\n          }\n        }\n\n        return {\n          text: totalStr,\n          values: totalValues\n        };\n      }\n    }]);\n\n    return _class13;\n  }(cls.Block);\n\n  // Base class for setting fields to values (used for INSERT and UPDATE queries)\n  cls.AbstractSetFieldBlock = function (_cls$Block5) {\n    _inherits(_class14, _cls$Block5);\n\n    function _class14(options) {\n      _classCallCheck(this, _class14);\n\n      var _this15 = _possibleConstructorReturn(this, (_class14.__proto__ || Object.getPrototypeOf(_class14)).call(this, options));\n\n      _this15._reset();\n      return _this15;\n    }\n\n    _createClass(_class14, [{\n      key: '_reset',\n      value: function _reset() {\n        this._fields = [];\n        this._values = [[]];\n        this._valueOptions = [[]];\n      }\n\n      // Update the given field with the given value.\n      // This will override any previously set value for the given field.\n\n    }, {\n      key: '_set',\n      value: function _set(field, value) {\n        var valueOptions = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n\n        if (this._values.length > 1) {\n          throw new Error(\"Cannot set multiple rows of fields this way.\");\n        }\n\n        if (typeof value !== 'undefined') {\n          value = this._sanitizeValue(value);\n        }\n\n        field = this._sanitizeField(field);\n\n        // Explicity overwrite existing fields\n        var index = this._fields.indexOf(field);\n\n        // if field not defined before\n        if (-1 === index) {\n          this._fields.push(field);\n          index = this._fields.length - 1;\n        }\n\n        this._values[0][index] = value;\n        this._valueOptions[0][index] = valueOptions;\n      }\n\n      // Insert fields based on the key/value pairs in the given object\n\n    }, {\n      key: '_setFields',\n      value: function _setFields(fields) {\n        var valueOptions = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n\n        if ((typeof fields === 'undefined' ? 'undefined' : _typeof(fields)) !== 'object') {\n          throw new Error(\"Expected an object but got \" + (typeof fields === 'undefined' ? 'undefined' : _typeof(fields)));\n        }\n\n        for (var field in fields) {\n          this._set(field, fields[field], valueOptions);\n        }\n      }\n\n      // Insert multiple rows for the given fields. Accepts an array of objects.\n      // This will override all previously set values for every field.\n\n    }, {\n      key: '_setFieldsRows',\n      value: function _setFieldsRows(fieldsRows) {\n        var valueOptions = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n\n        if (!_isArray(fieldsRows)) {\n          throw new Error(\"Expected an array of objects but got \" + (typeof fieldsRows === 'undefined' ? 'undefined' : _typeof(fieldsRows)));\n        }\n\n        // Reset the objects stored fields and values\n        this._reset();\n\n        // for each row\n        for (var i = 0; fieldsRows.length > i; ++i) {\n          var fieldRow = fieldsRows[i];\n\n          // for each field\n          for (var field in fieldRow) {\n            var value = fieldRow[field];\n\n            field = this._sanitizeField(field);\n            value = this._sanitizeValue(value);\n\n            var index = this._fields.indexOf(field);\n\n            if (0 < i && -1 === index) {\n              throw new Error('All fields in subsequent rows must match the fields in the first row');\n            }\n\n            // Add field only if it hasn't been added before\n            if (-1 === index) {\n              this._fields.push(field);\n              index = this._fields.length - 1;\n            }\n\n            // The first value added needs to add the array\n            if (!_isArray(this._values[i])) {\n              this._values[i] = [];\n              this._valueOptions[i] = [];\n            }\n\n            this._values[i][index] = value;\n            this._valueOptions[i][index] = valueOptions;\n          }\n        }\n      }\n    }]);\n\n    return _class14;\n  }(cls.Block);\n\n  // (UPDATE) SET field=value\n  cls.SetFieldBlock = function (_cls$AbstractSetField) {\n    _inherits(_class15, _cls$AbstractSetField);\n\n    function _class15() {\n      _classCallCheck(this, _class15);\n\n      return _possibleConstructorReturn(this, (_class15.__proto__ || Object.getPrototypeOf(_class15)).apply(this, arguments));\n    }\n\n    _createClass(_class15, [{\n      key: 'set',\n      value: function set(field, value, options) {\n        this._set(field, value, options);\n      }\n    }, {\n      key: 'setFields',\n      value: function setFields(fields, valueOptions) {\n        this._setFields(fields, valueOptions);\n      }\n    }, {\n      key: '_toParamString',\n      value: function _toParamString() {\n        var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n        var buildParameterized = options.buildParameterized;\n\n\n        if (0 >= this._fields.length) {\n          throw new Error(\"set() needs to be called\");\n        }\n\n        var totalStr = '',\n            totalValues = [];\n\n        for (var i = 0; i < this._fields.length; ++i) {\n          totalStr = _pad(totalStr, ', ');\n\n          var field = this._formatFieldName(this._fields[i]);\n          var value = this._values[0][i];\n\n          // e.g. field can be an expression such as `count = count + 1`\n          if (0 > field.indexOf('=')) {\n            field = field + ' = ' + this.options.parameterCharacter;\n          }\n\n          var ret = this._buildString(field, [value], {\n            buildParameterized: buildParameterized,\n            formattingOptions: this._valueOptions[0][i]\n          });\n\n          totalStr += ret.text;\n          ret.values.forEach(function (value) {\n            return totalValues.push(value);\n          });\n        }\n\n        return {\n          text: 'SET ' + totalStr,\n          values: totalValues\n        };\n      }\n    }]);\n\n    return _class15;\n  }(cls.AbstractSetFieldBlock);\n\n  // (INSERT INTO) ... field ... value\n  cls.InsertFieldValueBlock = function (_cls$AbstractSetField2) {\n    _inherits(_class16, _cls$AbstractSetField2);\n\n    function _class16() {\n      _classCallCheck(this, _class16);\n\n      return _possibleConstructorReturn(this, (_class16.__proto__ || Object.getPrototypeOf(_class16)).apply(this, arguments));\n    }\n\n    _createClass(_class16, [{\n      key: 'set',\n      value: function set(field, value) {\n        var options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n\n        this._set(field, value, options);\n      }\n    }, {\n      key: 'setFields',\n      value: function setFields(fields, valueOptions) {\n        this._setFields(fields, valueOptions);\n      }\n    }, {\n      key: 'setFieldsRows',\n      value: function setFieldsRows(fieldsRows, valueOptions) {\n        this._setFieldsRows(fieldsRows, valueOptions);\n      }\n    }, {\n      key: '_toParamString',\n      value: function _toParamString() {\n        var _this18 = this;\n\n        var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n        var buildParameterized = options.buildParameterized;\n\n\n        var fieldString = this._fields.map(function (f) {\n          return _this18._formatFieldName(f);\n        }).join(', ');\n\n        var valueStrings = [],\n            totalValues = [];\n\n        for (var i = 0; i < this._values.length; ++i) {\n          valueStrings[i] = '';\n\n          for (var j = 0; j < this._values[i].length; ++j) {\n            var ret = this._buildString(this.options.parameterCharacter, [this._values[i][j]], {\n              buildParameterized: buildParameterized,\n              formattingOptions: this._valueOptions[i][j]\n            });\n\n            ret.values.forEach(function (value) {\n              return totalValues.push(value);\n            });\n\n            valueStrings[i] = _pad(valueStrings[i], ', ');\n            valueStrings[i] += ret.text;\n          }\n        }\n\n        return {\n          text: fieldString.length ? '(' + fieldString + ') VALUES (' + valueStrings.join('), (') + ')' : '',\n          values: totalValues\n        };\n      }\n    }]);\n\n    return _class16;\n  }(cls.AbstractSetFieldBlock);\n\n  // (INSERT INTO) ... field ... (SELECT ... FROM ...)\n  cls.InsertFieldsFromQueryBlock = function (_cls$Block6) {\n    _inherits(_class17, _cls$Block6);\n\n    function _class17(options) {\n      _classCallCheck(this, _class17);\n\n      var _this19 = _possibleConstructorReturn(this, (_class17.__proto__ || Object.getPrototypeOf(_class17)).call(this, options));\n\n      _this19._fields = [];\n      _this19._query = null;\n      return _this19;\n    }\n\n    _createClass(_class17, [{\n      key: 'fromQuery',\n      value: function fromQuery(fields, selectQuery) {\n        var _this20 = this;\n\n        this._fields = fields.map(function (v) {\n          return _this20._sanitizeField(v);\n        });\n\n        this._query = this._sanitizeBaseBuilder(selectQuery);\n      }\n    }, {\n      key: '_toParamString',\n      value: function _toParamString() {\n        var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n\n        var totalStr = '',\n            totalValues = [];\n\n        if (this._fields.length && this._query) {\n          var _query$_toParamString = this._query._toParamString({\n            buildParameterized: options.buildParameterized,\n            nested: true\n          }),\n              text = _query$_toParamString.text,\n              values = _query$_toParamString.values;\n\n          totalStr = '(' + this._fields.join(', ') + ') ' + this._applyNestingFormatting(text);\n          totalValues = values;\n        }\n\n        return {\n          text: totalStr,\n          values: totalValues\n        };\n      }\n    }]);\n\n    return _class17;\n  }(cls.Block);\n\n  // DISTINCT\n  cls.DistinctBlock = function (_cls$Block7) {\n    _inherits(_class18, _cls$Block7);\n\n    function _class18() {\n      _classCallCheck(this, _class18);\n\n      return _possibleConstructorReturn(this, (_class18.__proto__ || Object.getPrototypeOf(_class18)).apply(this, arguments));\n    }\n\n    _createClass(_class18, [{\n      key: 'distinct',\n\n      // Add the DISTINCT keyword to the query.\n      value: function distinct() {\n        this._useDistinct = true;\n      }\n    }, {\n      key: '_toParamString',\n      value: function _toParamString() {\n        return {\n          text: this._useDistinct ? \"DISTINCT\" : \"\",\n          values: []\n        };\n      }\n    }]);\n\n    return _class18;\n  }(cls.Block);\n\n  // GROUP BY\n  cls.GroupByBlock = function (_cls$Block8) {\n    _inherits(_class19, _cls$Block8);\n\n    function _class19(options) {\n      _classCallCheck(this, _class19);\n\n      var _this22 = _possibleConstructorReturn(this, (_class19.__proto__ || Object.getPrototypeOf(_class19)).call(this, options));\n\n      _this22._groups = [];\n      return _this22;\n    }\n\n    // Add a GROUP BY transformation for the given field.\n\n\n    _createClass(_class19, [{\n      key: 'group',\n      value: function group(field) {\n        this._groups.push(this._sanitizeField(field));\n      }\n    }, {\n      key: '_toParamString',\n      value: function _toParamString() {\n        var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n\n        return {\n          text: this._groups.length ? 'GROUP BY ' + this._groups.join(', ') : '',\n          values: []\n        };\n      }\n    }]);\n\n    return _class19;\n  }(cls.Block);\n\n  cls.AbstractVerbSingleValueBlock = function (_cls$Block9) {\n    _inherits(_class20, _cls$Block9);\n\n    /**\n     * @param options.verb The prefix verb string.\n     */\n    function _class20(options) {\n      _classCallCheck(this, _class20);\n\n      var _this23 = _possibleConstructorReturn(this, (_class20.__proto__ || Object.getPrototypeOf(_class20)).call(this, options));\n\n      _this23._value = null;\n      return _this23;\n    }\n\n    _createClass(_class20, [{\n      key: '_setValue',\n      value: function _setValue(value) {\n        this._value = null !== value ? this._sanitizeLimitOffset(value) : value;\n      }\n    }, {\n      key: '_toParamString',\n      value: function _toParamString() {\n        var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n\n        var expr = null !== this._value ? this.options.verb + ' ' + this.options.parameterCharacter : '';\n\n        var values = null !== this._value ? [this._value] : [];\n\n        return this._buildString(expr, values, options);\n      }\n    }]);\n\n    return _class20;\n  }(cls.Block);\n\n  // OFFSET x\n  cls.OffsetBlock = function (_cls$AbstractVerbSing) {\n    _inherits(_class21, _cls$AbstractVerbSing);\n\n    function _class21(options) {\n      _classCallCheck(this, _class21);\n\n      return _possibleConstructorReturn(this, (_class21.__proto__ || Object.getPrototypeOf(_class21)).call(this, _extend({}, options, {\n        verb: 'OFFSET'\n      })));\n    }\n\n    /**\n    # Set the OFFSET transformation.\n    #\n    # Call this will override the previously set offset for this query. Also note that Passing 0 for 'max' will remove\n    # the offset.\n    */\n\n\n    _createClass(_class21, [{\n      key: 'offset',\n      value: function offset(start) {\n        this._setValue(start);\n      }\n    }]);\n\n    return _class21;\n  }(cls.AbstractVerbSingleValueBlock);\n\n  // LIMIT\n  cls.LimitBlock = function (_cls$AbstractVerbSing2) {\n    _inherits(_class22, _cls$AbstractVerbSing2);\n\n    function _class22(options) {\n      _classCallCheck(this, _class22);\n\n      return _possibleConstructorReturn(this, (_class22.__proto__ || Object.getPrototypeOf(_class22)).call(this, _extend({}, options, {\n        verb: 'LIMIT'\n      })));\n    }\n\n    /**\n    # Set the LIMIT transformation.\n    #\n    # Call this will override the previously set limit for this query. Also note that Passing `null` will remove\n    # the limit.\n    */\n\n\n    _createClass(_class22, [{\n      key: 'limit',\n      value: function limit(_limit2) {\n        this._setValue(_limit2);\n      }\n    }]);\n\n    return _class22;\n  }(cls.AbstractVerbSingleValueBlock);\n\n  // Abstract condition base class\n  cls.AbstractConditionBlock = function (_cls$Block10) {\n    _inherits(_class23, _cls$Block10);\n\n    /**\n     * @param {String} options.verb The condition verb.\n     */\n    function _class23(options) {\n      _classCallCheck(this, _class23);\n\n      var _this26 = _possibleConstructorReturn(this, (_class23.__proto__ || Object.getPrototypeOf(_class23)).call(this, options));\n\n      _this26._conditions = [];\n      return _this26;\n    }\n\n    /**\n    # Add a condition.\n    #\n    # When the final query is constructed all the conditions are combined using the intersection (AND) operator.\n    #\n    # Concrete subclasses should provide a method which calls this\n    */\n\n\n    _createClass(_class23, [{\n      key: '_condition',\n      value: function _condition(condition) {\n        condition = this._sanitizeExpression(condition);\n\n        for (var _len6 = arguments.length, values = Array(_len6 > 1 ? _len6 - 1 : 0), _key6 = 1; _key6 < _len6; _key6++) {\n          values[_key6 - 1] = arguments[_key6];\n        }\n\n        this._conditions.push({\n          expr: condition,\n          values: values || []\n        });\n      }\n    }, {\n      key: '_toParamString',\n      value: function _toParamString() {\n        var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n\n        var totalStr = [],\n            totalValues = [];\n\n        var _iteratorNormalCompletion8 = true;\n        var _didIteratorError8 = false;\n        var _iteratorError8 = undefined;\n\n        try {\n          for (var _iterator8 = this._conditions[Symbol.iterator](), _step8; !(_iteratorNormalCompletion8 = (_step8 = _iterator8.next()).done); _iteratorNormalCompletion8 = true) {\n            var _step8$value = _step8.value,\n                expr = _step8$value.expr,\n                _values2 = _step8$value.values;\n\n            var ret = cls.isSquelBuilder(expr) ? expr._toParamString({\n              buildParameterized: options.buildParameterized\n            }) : this._buildString(expr, _values2, {\n              buildParameterized: options.buildParameterized\n            });\n\n            if (ret.text.length) {\n              totalStr.push(ret.text);\n            }\n\n            ret.values.forEach(function (value) {\n              return totalValues.push(value);\n            });\n          }\n        } catch (err) {\n          _didIteratorError8 = true;\n          _iteratorError8 = err;\n        } finally {\n          try {\n            if (!_iteratorNormalCompletion8 && _iterator8.return) {\n              _iterator8.return();\n            }\n          } finally {\n            if (_didIteratorError8) {\n              throw _iteratorError8;\n            }\n          }\n        }\n\n        if (totalStr.length) {\n          totalStr = totalStr.join(') AND (');\n        }\n\n        return {\n          text: totalStr.length ? this.options.verb + ' (' + totalStr + ')' : '',\n          values: totalValues\n        };\n      }\n    }]);\n\n    return _class23;\n  }(cls.Block);\n\n  // WHERE\n  cls.WhereBlock = function (_cls$AbstractConditio) {\n    _inherits(_class24, _cls$AbstractConditio);\n\n    function _class24(options) {\n      _classCallCheck(this, _class24);\n\n      return _possibleConstructorReturn(this, (_class24.__proto__ || Object.getPrototypeOf(_class24)).call(this, _extend({}, options, {\n        verb: 'WHERE'\n      })));\n    }\n\n    _createClass(_class24, [{\n      key: 'where',\n      value: function where(condition) {\n        for (var _len7 = arguments.length, values = Array(_len7 > 1 ? _len7 - 1 : 0), _key7 = 1; _key7 < _len7; _key7++) {\n          values[_key7 - 1] = arguments[_key7];\n        }\n\n        this._condition.apply(this, [condition].concat(values));\n      }\n    }]);\n\n    return _class24;\n  }(cls.AbstractConditionBlock);\n\n  // HAVING\n  cls.HavingBlock = function (_cls$AbstractConditio2) {\n    _inherits(_class25, _cls$AbstractConditio2);\n\n    function _class25(options) {\n      _classCallCheck(this, _class25);\n\n      return _possibleConstructorReturn(this, (_class25.__proto__ || Object.getPrototypeOf(_class25)).call(this, _extend({}, options, {\n        verb: 'HAVING'\n      })));\n    }\n\n    _createClass(_class25, [{\n      key: 'having',\n      value: function having(condition) {\n        for (var _len8 = arguments.length, values = Array(_len8 > 1 ? _len8 - 1 : 0), _key8 = 1; _key8 < _len8; _key8++) {\n          values[_key8 - 1] = arguments[_key8];\n        }\n\n        this._condition.apply(this, [condition].concat(values));\n      }\n    }]);\n\n    return _class25;\n  }(cls.AbstractConditionBlock);\n\n  // ORDER BY\n  cls.OrderByBlock = function (_cls$Block11) {\n    _inherits(_class26, _cls$Block11);\n\n    function _class26(options) {\n      _classCallCheck(this, _class26);\n\n      var _this29 = _possibleConstructorReturn(this, (_class26.__proto__ || Object.getPrototypeOf(_class26)).call(this, options));\n\n      _this29._orders = [];\n      return _this29;\n    }\n\n    /**\n    # Add an ORDER BY transformation for the given field in the given order.\n    #\n    # To specify descending order pass false for the 'dir' parameter.\n    */\n\n\n    _createClass(_class26, [{\n      key: 'order',\n      value: function order(field, dir) {\n        field = this._sanitizeField(field);\n\n        if (!(typeof dir === 'string')) {\n          if (dir === undefined) {\n            dir = 'ASC'; // Default to asc\n          } else if (dir !== null) {\n            dir = dir ? 'ASC' : 'DESC'; // Convert truthy to asc\n          }\n        }\n\n        for (var _len9 = arguments.length, values = Array(_len9 > 2 ? _len9 - 2 : 0), _key9 = 2; _key9 < _len9; _key9++) {\n          values[_key9 - 2] = arguments[_key9];\n        }\n\n        this._orders.push({\n          field: field,\n          dir: dir,\n          values: values || []\n        });\n      }\n    }, {\n      key: '_toParamString',\n      value: function _toParamString() {\n        var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n\n        var totalStr = '',\n            totalValues = [];\n\n        var _iteratorNormalCompletion9 = true;\n        var _didIteratorError9 = false;\n        var _iteratorError9 = undefined;\n\n        try {\n          for (var _iterator9 = this._orders[Symbol.iterator](), _step9; !(_iteratorNormalCompletion9 = (_step9 = _iterator9.next()).done); _iteratorNormalCompletion9 = true) {\n            var _step9$value = _step9.value,\n                field = _step9$value.field,\n                dir = _step9$value.dir,\n                _values3 = _step9$value.values;\n\n            totalStr = _pad(totalStr, ', ');\n\n            var ret = this._buildString(field, _values3, {\n              buildParameterized: options.buildParameterized\n            });\n\n            totalStr += ret.text, _isArray(ret.values) && ret.values.forEach(function (value) {\n              return totalValues.push(value);\n            });\n\n            if (dir !== null) {\n              totalStr += ' ' + dir;\n            }\n          }\n        } catch (err) {\n          _didIteratorError9 = true;\n          _iteratorError9 = err;\n        } finally {\n          try {\n            if (!_iteratorNormalCompletion9 && _iterator9.return) {\n              _iterator9.return();\n            }\n          } finally {\n            if (_didIteratorError9) {\n              throw _iteratorError9;\n            }\n          }\n        }\n\n        return {\n          text: totalStr.length ? 'ORDER BY ' + totalStr : '',\n          values: totalValues\n        };\n      }\n    }]);\n\n    return _class26;\n  }(cls.Block);\n\n  // JOIN\n  cls.JoinBlock = function (_cls$Block12) {\n    _inherits(_class27, _cls$Block12);\n\n    function _class27(options) {\n      _classCallCheck(this, _class27);\n\n      var _this30 = _possibleConstructorReturn(this, (_class27.__proto__ || Object.getPrototypeOf(_class27)).call(this, options));\n\n      _this30._joins = [];\n      return _this30;\n    }\n\n    /**\n    # Add a JOIN with the given table.\n    #\n    # 'table' is the name of the table to join with.\n    #\n    # 'alias' is an optional alias for the table name.\n    #\n    # 'condition' is an optional condition (containing an SQL expression) for the JOIN.\n    #\n    # 'type' must be either one of INNER, OUTER, LEFT or RIGHT. Default is 'INNER'.\n    #\n    */\n\n\n    _createClass(_class27, [{\n      key: 'join',\n      value: function join(table) {\n        var alias = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;\n        var condition = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : null;\n        var type = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : 'INNER';\n\n        table = this._sanitizeTable(table, true);\n        alias = alias ? this._sanitizeTableAlias(alias) : alias;\n        condition = condition ? this._sanitizeExpression(condition) : condition;\n\n        this._joins.push({\n          type: type,\n          table: table,\n          alias: alias,\n          condition: condition\n        });\n      }\n    }, {\n      key: 'left_join',\n      value: function left_join(table) {\n        var alias = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;\n        var condition = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : null;\n\n        this.join(table, alias, condition, 'LEFT');\n      }\n    }, {\n      key: 'right_join',\n      value: function right_join(table) {\n        var alias = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;\n        var condition = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : null;\n\n        this.join(table, alias, condition, 'RIGHT');\n      }\n    }, {\n      key: 'outer_join',\n      value: function outer_join(table) {\n        var alias = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;\n        var condition = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : null;\n\n        this.join(table, alias, condition, 'OUTER');\n      }\n    }, {\n      key: 'left_outer_join',\n      value: function left_outer_join(table) {\n        var alias = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;\n        var condition = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : null;\n\n        this.join(table, alias, condition, 'LEFT OUTER');\n      }\n    }, {\n      key: 'full_join',\n      value: function full_join(table) {\n        var alias = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;\n        var condition = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : null;\n\n        this.join(table, alias, condition, 'FULL');\n      }\n    }, {\n      key: 'cross_join',\n      value: function cross_join(table) {\n        var alias = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;\n        var condition = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : null;\n\n        this.join(table, alias, condition, 'CROSS');\n      }\n    }, {\n      key: '_toParamString',\n      value: function _toParamString() {\n        var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n\n        var totalStr = \"\",\n            totalValues = [];\n\n        var _iteratorNormalCompletion10 = true;\n        var _didIteratorError10 = false;\n        var _iteratorError10 = undefined;\n\n        try {\n          for (var _iterator10 = this._joins[Symbol.iterator](), _step10; !(_iteratorNormalCompletion10 = (_step10 = _iterator10.next()).done); _iteratorNormalCompletion10 = true) {\n            var _step10$value = _step10.value,\n                type = _step10$value.type,\n                table = _step10$value.table,\n                alias = _step10$value.alias,\n                condition = _step10$value.condition;\n\n            totalStr = _pad(totalStr, this.options.separator);\n\n            var tableStr = void 0;\n\n            if (cls.isSquelBuilder(table)) {\n              var ret = table._toParamString({\n                buildParameterized: options.buildParameterized,\n                nested: true\n              });\n\n              ret.values.forEach(function (value) {\n                return totalValues.push(value);\n              });\n              tableStr = ret.text;\n            } else {\n              tableStr = this._formatTableName(table);\n            }\n\n            totalStr += type + ' JOIN ' + tableStr;\n\n            if (alias) {\n              totalStr += ' ' + this._formatTableAlias(alias);\n            }\n\n            if (condition) {\n              totalStr += ' ON ';\n\n              var _ret2 = void 0;\n\n              if (cls.isSquelBuilder(condition)) {\n                _ret2 = condition._toParamString({\n                  buildParameterized: options.buildParameterized\n                });\n              } else {\n                _ret2 = this._buildString(condition, [], {\n                  buildParameterized: options.buildParameterized\n                });\n              }\n\n              totalStr += this._applyNestingFormatting(_ret2.text);\n              _ret2.values.forEach(function (value) {\n                return totalValues.push(value);\n              });\n            }\n          }\n        } catch (err) {\n          _didIteratorError10 = true;\n          _iteratorError10 = err;\n        } finally {\n          try {\n            if (!_iteratorNormalCompletion10 && _iterator10.return) {\n              _iterator10.return();\n            }\n          } finally {\n            if (_didIteratorError10) {\n              throw _iteratorError10;\n            }\n          }\n        }\n\n        return {\n          text: totalStr,\n          values: totalValues\n        };\n      }\n    }]);\n\n    return _class27;\n  }(cls.Block);\n\n  // UNION\n  cls.UnionBlock = function (_cls$Block13) {\n    _inherits(_class28, _cls$Block13);\n\n    function _class28(options) {\n      _classCallCheck(this, _class28);\n\n      var _this31 = _possibleConstructorReturn(this, (_class28.__proto__ || Object.getPrototypeOf(_class28)).call(this, options));\n\n      _this31._unions = [];\n      return _this31;\n    }\n\n    /**\n    # Add a UNION with the given table/query.\n    #\n    # 'table' is the name of the table or query to union with.\n    #\n    # 'type' must be either one of UNION or UNION ALL.... Default is 'UNION'.\n    */\n\n\n    _createClass(_class28, [{\n      key: 'union',\n      value: function union(table) {\n        var type = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 'UNION';\n\n        table = this._sanitizeTable(table);\n\n        this._unions.push({\n          type: type,\n          table: table\n        });\n      }\n\n      // Add a UNION ALL with the given table/query.\n\n    }, {\n      key: 'union_all',\n      value: function union_all(table) {\n        this.union(table, 'UNION ALL');\n      }\n    }, {\n      key: '_toParamString',\n      value: function _toParamString() {\n        var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n\n        var totalStr = '',\n            totalValues = [];\n\n        var _iteratorNormalCompletion11 = true;\n        var _didIteratorError11 = false;\n        var _iteratorError11 = undefined;\n\n        try {\n          for (var _iterator11 = this._unions[Symbol.iterator](), _step11; !(_iteratorNormalCompletion11 = (_step11 = _iterator11.next()).done); _iteratorNormalCompletion11 = true) {\n            var _step11$value = _step11.value,\n                type = _step11$value.type,\n                table = _step11$value.table;\n\n            totalStr = _pad(totalStr, this.options.separator);\n\n            var tableStr = void 0;\n\n            if (table instanceof cls.BaseBuilder) {\n              var ret = table._toParamString({\n                buildParameterized: options.buildParameterized,\n                nested: true\n              });\n\n              tableStr = ret.text;\n              ret.values.forEach(function (value) {\n                return totalValues.push(value);\n              });\n            } else {\n              totalStr = this._formatTableName(table);\n            }\n\n            totalStr += type + ' ' + tableStr;\n          }\n        } catch (err) {\n          _didIteratorError11 = true;\n          _iteratorError11 = err;\n        } finally {\n          try {\n            if (!_iteratorNormalCompletion11 && _iterator11.return) {\n              _iterator11.return();\n            }\n          } finally {\n            if (_didIteratorError11) {\n              throw _iteratorError11;\n            }\n          }\n        }\n\n        return {\n          text: totalStr,\n          values: totalValues\n        };\n      }\n    }]);\n\n    return _class28;\n  }(cls.Block);\n\n  /*\n  # ---------------------------------------------------------------------------------------------------------\n  # ---------------------------------------------------------------------------------------------------------\n  # Query builders\n  # ---------------------------------------------------------------------------------------------------------\n  # ---------------------------------------------------------------------------------------------------------\n  */\n\n  /**\n  # Query builder base class\n  #\n  # Note that the query builder does not check the final query string for correctness.\n  #\n  # All the build methods in this object return the object instance for chained method calling purposes.\n  */\n  cls.QueryBuilder = function (_cls$BaseBuilder4) {\n    _inherits(_class29, _cls$BaseBuilder4);\n\n    /**\n    # Constructor\n    #\n    # blocks - array of cls.BaseBuilderBlock instances to build the query with.\n    */\n    function _class29(options, blocks) {\n      _classCallCheck(this, _class29);\n\n      var _this32 = _possibleConstructorReturn(this, (_class29.__proto__ || Object.getPrototypeOf(_class29)).call(this, options));\n\n      _this32.blocks = blocks || [];\n\n      // Copy exposed methods into myself\n      var _iteratorNormalCompletion12 = true;\n      var _didIteratorError12 = false;\n      var _iteratorError12 = undefined;\n\n      try {\n        for (var _iterator12 = _this32.blocks[Symbol.iterator](), _step12; !(_iteratorNormalCompletion12 = (_step12 = _iterator12.next()).done); _iteratorNormalCompletion12 = true) {\n          var block = _step12.value;\n\n          var exposedMethods = block.exposedMethods();\n\n          for (var methodName in exposedMethods) {\n            var methodBody = exposedMethods[methodName];\n\n            if (undefined !== _this32[methodName]) {\n              throw new Error('Builder already has a builder method called: ' + methodName);\n            }\n\n            (function (block, name, body) {\n              _this32[name] = function () {\n                for (var _len10 = arguments.length, args = Array(_len10), _key10 = 0; _key10 < _len10; _key10++) {\n                  args[_key10] = arguments[_key10];\n                }\n\n                body.call.apply(body, [block].concat(args));\n\n                return _this32;\n              };\n            })(block, methodName, methodBody);\n          }\n        }\n      } catch (err) {\n        _didIteratorError12 = true;\n        _iteratorError12 = err;\n      } finally {\n        try {\n          if (!_iteratorNormalCompletion12 && _iterator12.return) {\n            _iterator12.return();\n          }\n        } finally {\n          if (_didIteratorError12) {\n            throw _iteratorError12;\n          }\n        }\n      }\n\n      return _this32;\n    }\n\n    /**\n    # Register a custom value handler for this query builder and all its contained blocks.\n    #\n    # Note: This will override any globally registered handler for this value type.\n    */\n\n\n    _createClass(_class29, [{\n      key: 'registerValueHandler',\n      value: function registerValueHandler(type, handler) {\n        var _iteratorNormalCompletion13 = true;\n        var _didIteratorError13 = false;\n        var _iteratorError13 = undefined;\n\n        try {\n          for (var _iterator13 = this.blocks[Symbol.iterator](), _step13; !(_iteratorNormalCompletion13 = (_step13 = _iterator13.next()).done); _iteratorNormalCompletion13 = true) {\n            var block = _step13.value;\n\n            block.registerValueHandler(type, handler);\n          }\n        } catch (err) {\n          _didIteratorError13 = true;\n          _iteratorError13 = err;\n        } finally {\n          try {\n            if (!_iteratorNormalCompletion13 && _iterator13.return) {\n              _iterator13.return();\n            }\n          } finally {\n            if (_didIteratorError13) {\n              throw _iteratorError13;\n            }\n          }\n        }\n\n        _get(_class29.prototype.__proto__ || Object.getPrototypeOf(_class29.prototype), 'registerValueHandler', this).call(this, type, handler);\n\n        return this;\n      }\n\n      /**\n      # Update query builder options\n      #\n      # This will update the options for all blocks too. Use this method with caution as it allows you to change the\n      # behaviour of your query builder mid-build.\n      */\n\n    }, {\n      key: 'updateOptions',\n      value: function updateOptions(options) {\n        this.options = _extend({}, this.options, options);\n\n        var _iteratorNormalCompletion14 = true;\n        var _didIteratorError14 = false;\n        var _iteratorError14 = undefined;\n\n        try {\n          for (var _iterator14 = this.blocks[Symbol.iterator](), _step14; !(_iteratorNormalCompletion14 = (_step14 = _iterator14.next()).done); _iteratorNormalCompletion14 = true) {\n            var block = _step14.value;\n\n            block.options = _extend({}, block.options, options);\n          }\n        } catch (err) {\n          _didIteratorError14 = true;\n          _iteratorError14 = err;\n        } finally {\n          try {\n            if (!_iteratorNormalCompletion14 && _iterator14.return) {\n              _iterator14.return();\n            }\n          } finally {\n            if (_didIteratorError14) {\n              throw _iteratorError14;\n            }\n          }\n        }\n      }\n\n      // Get the final fully constructed query param obj.\n\n    }, {\n      key: '_toParamString',\n      value: function _toParamString() {\n        var _this33 = this;\n\n        var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n\n        options = _extend({}, this.options, options);\n\n        var blockResults = this.blocks.map(function (b) {\n          return b._toParamString({\n            buildParameterized: options.buildParameterized,\n            queryBuilder: _this33\n          });\n        });\n\n        var blockTexts = blockResults.map(function (b) {\n          return b.text;\n        });\n        var blockValues = blockResults.map(function (b) {\n          return b.values;\n        });\n\n        var totalStr = blockTexts.filter(function (v) {\n          return 0 < v.length;\n        }).join(options.separator);\n\n        var totalValues = [];\n        blockValues.forEach(function (block) {\n          return block.forEach(function (value) {\n            return totalValues.push(value);\n          });\n        });\n\n        if (!options.nested) {\n          if (options.numberedParameters) {\n            var i = undefined !== options.numberedParametersStartAt ? options.numberedParametersStartAt : 1;\n\n            // construct regex for searching\n            var regex = options.parameterCharacter.replace(/[-[\\]{}()*+?.,\\\\^$|#\\s]/g, \"\\\\$&\");\n\n            totalStr = totalStr.replace(new RegExp(regex, 'g'), function () {\n              return '' + options.numberedParametersPrefix + i++;\n            });\n          }\n        }\n\n        return {\n          text: this._applyNestingFormatting(totalStr, !!options.nested),\n          values: totalValues\n        };\n      }\n\n      // Deep clone\n\n    }, {\n      key: 'clone',\n      value: function clone() {\n        var blockClones = this.blocks.map(function (v) {\n          return v.clone();\n        });\n\n        return new this.constructor(this.options, blockClones);\n      }\n\n      // Get a specific block\n\n    }, {\n      key: 'getBlock',\n      value: function getBlock(blockType) {\n        var filtered = this.blocks.filter(function (b) {\n          return b instanceof blockType;\n        });\n\n        return filtered[0];\n      }\n    }]);\n\n    return _class29;\n  }(cls.BaseBuilder);\n\n  // SELECT query builder.\n  cls.Select = function (_cls$QueryBuilder) {\n    _inherits(_class30, _cls$QueryBuilder);\n\n    function _class30(options) {\n      var blocks = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;\n\n      _classCallCheck(this, _class30);\n\n      blocks = blocks || [new cls.StringBlock(options, 'SELECT'), new cls.FunctionBlock(options), new cls.DistinctBlock(options), new cls.GetFieldBlock(options), new cls.FromTableBlock(options), new cls.JoinBlock(options), new cls.WhereBlock(options), new cls.GroupByBlock(options), new cls.HavingBlock(options), new cls.OrderByBlock(options), new cls.LimitBlock(options), new cls.OffsetBlock(options), new cls.UnionBlock(options)];\n\n      return _possibleConstructorReturn(this, (_class30.__proto__ || Object.getPrototypeOf(_class30)).call(this, options, blocks));\n    }\n\n    return _class30;\n  }(cls.QueryBuilder);\n\n  // UPDATE query builder.\n  cls.Update = function (_cls$QueryBuilder2) {\n    _inherits(_class31, _cls$QueryBuilder2);\n\n    function _class31(options) {\n      var blocks = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;\n\n      _classCallCheck(this, _class31);\n\n      blocks = blocks || [new cls.StringBlock(options, 'UPDATE'), new cls.UpdateTableBlock(options), new cls.SetFieldBlock(options), new cls.WhereBlock(options), new cls.OrderByBlock(options), new cls.LimitBlock(options)];\n\n      return _possibleConstructorReturn(this, (_class31.__proto__ || Object.getPrototypeOf(_class31)).call(this, options, blocks));\n    }\n\n    return _class31;\n  }(cls.QueryBuilder);\n\n  // DELETE query builder.\n  cls.Delete = function (_cls$QueryBuilder3) {\n    _inherits(_class32, _cls$QueryBuilder3);\n\n    function _class32(options) {\n      var blocks = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;\n\n      _classCallCheck(this, _class32);\n\n      blocks = blocks || [new cls.StringBlock(options, 'DELETE'), new cls.TargetTableBlock(options), new cls.FromTableBlock(_extend({}, options, {\n        singleTable: true\n      })), new cls.JoinBlock(options), new cls.WhereBlock(options), new cls.OrderByBlock(options), new cls.LimitBlock(options)];\n\n      return _possibleConstructorReturn(this, (_class32.__proto__ || Object.getPrototypeOf(_class32)).call(this, options, blocks));\n    }\n\n    return _class32;\n  }(cls.QueryBuilder);\n\n  // An INSERT query builder.\n  cls.Insert = function (_cls$QueryBuilder4) {\n    _inherits(_class33, _cls$QueryBuilder4);\n\n    function _class33(options) {\n      var blocks = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;\n\n      _classCallCheck(this, _class33);\n\n      blocks = blocks || [new cls.StringBlock(options, 'INSERT'), new cls.IntoTableBlock(options), new cls.InsertFieldValueBlock(options), new cls.InsertFieldsFromQueryBlock(options)];\n\n      return _possibleConstructorReturn(this, (_class33.__proto__ || Object.getPrototypeOf(_class33)).call(this, options, blocks));\n    }\n\n    return _class33;\n  }(cls.QueryBuilder);\n\n  var _squel = {\n    VERSION: '5.12.0',\n    flavour: flavour,\n    expr: function expr(options) {\n      return new cls.Expression(options);\n    },\n    case: function _case(name, options) {\n      return new cls.Case(name, options);\n    },\n    select: function select(options, blocks) {\n      return new cls.Select(options, blocks);\n    },\n    update: function update(options, blocks) {\n      return new cls.Update(options, blocks);\n    },\n    insert: function insert(options, blocks) {\n      return new cls.Insert(options, blocks);\n    },\n    delete: function _delete(options, blocks) {\n      return new cls.Delete(options, blocks);\n    },\n    str: function str() {\n      var inst = new cls.FunctionBlock();\n      inst.function.apply(inst, arguments);\n      return inst;\n    },\n    rstr: function rstr() {\n      var inst = new cls.FunctionBlock({\n        rawNesting: true\n      });\n      inst.function.apply(inst, arguments);\n      return inst;\n    },\n    registerValueHandler: cls.registerValueHandler\n  };\n\n  // aliases\n  _squel.remove = _squel.delete;\n\n  // classes\n  _squel.cls = cls;\n\n  return _squel;\n}\n\n/**\n# ---------------------------------------------------------------------------------------------------------\n# ---------------------------------------------------------------------------------------------------------\n# Exported instance (and for use by flavour definitions further down).\n# ---------------------------------------------------------------------------------------------------------\n# ---------------------------------------------------------------------------------------------------------\n*/\n\nvar squel = _buildSquel();\n\n/**\n# ---------------------------------------------------------------------------------------------------------\n# ---------------------------------------------------------------------------------------------------------\n# Squel SQL flavours\n# ---------------------------------------------------------------------------------------------------------\n# ---------------------------------------------------------------------------------------------------------\n*/\n\n// Available flavours\nsquel.flavours = {};\n\n// Setup Squel for a particular SQL flavour\nsquel.useFlavour = function () {\n  var flavour = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : null;\n\n  if (!flavour) {\n    return squel;\n  }\n\n  if (squel.flavours[flavour] instanceof Function) {\n    var s = _buildSquel(flavour);\n\n    squel.flavours[flavour].call(null, s);\n\n    // add in flavour methods\n    s.flavours = squel.flavours;\n    s.useFlavour = squel.useFlavour;\n\n    return s;\n  } else {\n    throw new Error('Flavour not available: ' + flavour);\n  }\n};\n\nsquel.flavours['mssql'] = function (_squel) {\n  var cls = _squel.cls;\n\n  cls.DefaultQueryBuilderOptions.replaceSingleQuotes = true;\n  cls.DefaultQueryBuilderOptions.autoQuoteAliasNames = false;\n  cls.DefaultQueryBuilderOptions.numberedParametersPrefix = '@';\n\n  _squel.registerValueHandler(Date, function (date) {\n    return '\\'' + date.getUTCFullYear() + '-' + (date.getUTCMonth() + 1) + '-' + date.getUTCDate() + ' ' + date.getUTCHours() + ':' + date.getUTCMinutes() + ':' + date.getUTCSeconds() + '\\'';\n  });\n\n  //�LIMIT,  OFFSET x and TOP x\n  cls.MssqlLimitOffsetTopBlock = function (_cls$Block14) {\n    _inherits(_class34, _cls$Block14);\n\n    function _class34(options) {\n      _classCallCheck(this, _class34);\n\n      var _this38 = _possibleConstructorReturn(this, (_class34.__proto__ || Object.getPrototypeOf(_class34)).call(this, options));\n\n      _this38._limits = null;\n      _this38._offsets = null;\n\n      // This is setup as one block to return many as they all have to use each others data at different times\n      // The build String of EITHER LIMIT OR TOP should execute, never both.\n\n      /**\n      # Set the LIMIT/TOP transformation.\n      #\n      # Call this will override the previously set limit for this query. Also note that Passing 0 for 'max' will remove\n      # the limit.\n      */\n      var _limit = function _limit(max) {\n        max = this._sanitizeLimitOffset(max);\n        this._parent._limits = max;\n      };\n\n      _this38.ParentBlock = function (_cls$Block15) {\n        _inherits(_class35, _cls$Block15);\n\n        function _class35(parent) {\n          _classCallCheck(this, _class35);\n\n          var _this39 = _possibleConstructorReturn(this, (_class35.__proto__ || Object.getPrototypeOf(_class35)).call(this, parent.options));\n\n          _this39._parent = parent;\n          return _this39;\n        }\n\n        return _class35;\n      }(cls.Block);\n\n      _this38.LimitBlock = function (_this38$ParentBlock) {\n        _inherits(_class36, _this38$ParentBlock);\n\n        function _class36(parent) {\n          _classCallCheck(this, _class36);\n\n          var _this40 = _possibleConstructorReturn(this, (_class36.__proto__ || Object.getPrototypeOf(_class36)).call(this, parent));\n\n          _this40.limit = _limit;\n          return _this40;\n        }\n\n        _createClass(_class36, [{\n          key: '_toParamString',\n          value: function _toParamString() {\n            var str = \"\";\n\n            if (this._parent._limits && this._parent._offsets) {\n              str = 'FETCH NEXT ' + this._parent._limits + ' ROWS ONLY';\n            }\n\n            return {\n              text: str,\n              values: []\n            };\n          }\n        }]);\n\n        return _class36;\n      }(_this38.ParentBlock);\n\n      _this38.TopBlock = function (_this38$ParentBlock2) {\n        _inherits(_class37, _this38$ParentBlock2);\n\n        function _class37(parent) {\n          _classCallCheck(this, _class37);\n\n          var _this41 = _possibleConstructorReturn(this, (_class37.__proto__ || Object.getPrototypeOf(_class37)).call(this, parent));\n\n          _this41.top = _limit;\n          return _this41;\n        }\n\n        _createClass(_class37, [{\n          key: '_toParamString',\n          value: function _toParamString() {\n            var str = \"\";\n\n            if (this._parent._limits && !this._parent._offsets) {\n              str = 'TOP (' + this._parent._limits + ')';\n            }\n\n            return {\n              text: str,\n              values: []\n            };\n          }\n        }]);\n\n        return _class37;\n      }(_this38.ParentBlock);\n\n      _this38.OffsetBlock = function (_this38$ParentBlock3) {\n        _inherits(_class38, _this38$ParentBlock3);\n\n        function _class38() {\n          _classCallCheck(this, _class38);\n\n          return _possibleConstructorReturn(this, (_class38.__proto__ || Object.getPrototypeOf(_class38)).apply(this, arguments));\n        }\n\n        _createClass(_class38, [{\n          key: 'offset',\n          value: function offset(start) {\n            this._parent._offsets = this._sanitizeLimitOffset(start);\n          }\n        }, {\n          key: '_toParamString',\n          value: function _toParamString() {\n            var str = \"\";\n\n            if (this._parent._offsets) {\n              str = 'OFFSET ' + this._parent._offsets + ' ROWS';\n            }\n\n            return {\n              text: str,\n              values: []\n            };\n          }\n        }]);\n\n        return _class38;\n      }(_this38.ParentBlock);\n      return _this38;\n    }\n\n    _createClass(_class34, [{\n      key: 'LIMIT',\n      value: function LIMIT() {\n        return new this.LimitBlock(this);\n      }\n    }, {\n      key: 'TOP',\n      value: function TOP() {\n        return new this.TopBlock(this);\n      }\n    }, {\n      key: 'OFFSET',\n      value: function OFFSET() {\n        return new this.OffsetBlock(this);\n      }\n    }]);\n\n    return _class34;\n  }(cls.Block);\n\n  cls.MssqlUpdateTopBlock = function (_cls$Block16) {\n    _inherits(_class39, _cls$Block16);\n\n    function _class39(options) {\n      _classCallCheck(this, _class39);\n\n      var _this43 = _possibleConstructorReturn(this, (_class39.__proto__ || Object.getPrototypeOf(_class39)).call(this, options));\n\n      _this43._limits = null;\n\n      _this43.limit = _this43.top = function (max) {\n        _this43._limits = _this43._sanitizeLimitOffset(max);\n      };\n      return _this43;\n    }\n\n    _createClass(_class39, [{\n      key: '_toParamString',\n      value: function _toParamString() {\n        return {\n          text: this._limits ? 'TOP (' + this._limits + ')' : \"\",\n          values: []\n        };\n      }\n    }]);\n\n    return _class39;\n  }(cls.Block);\n\n  cls.MssqlInsertFieldValueBlock = function (_cls$InsertFieldValue) {\n    _inherits(_class40, _cls$InsertFieldValue);\n\n    function _class40(options) {\n      _classCallCheck(this, _class40);\n\n      var _this44 = _possibleConstructorReturn(this, (_class40.__proto__ || Object.getPrototypeOf(_class40)).call(this, options));\n\n      _this44._outputs = [];\n      return _this44;\n    }\n\n    // add fields to the output clause\n\n\n    _createClass(_class40, [{\n      key: 'output',\n      value: function output(fields) {\n        var _this45 = this;\n\n        if ('string' === typeof fields) {\n          this._outputs.push('INSERTED.' + this._sanitizeField(fields));\n        } else {\n          fields.forEach(function (f) {\n            _this45._outputs.push('INSERTED.' + _this45._sanitizeField(f));\n          });\n        }\n      }\n    }, {\n      key: '_toParamString',\n      value: function _toParamString(options) {\n        var ret = _get(_class40.prototype.__proto__ || Object.getPrototypeOf(_class40.prototype), '_toParamString', this).call(this, options);\n\n        if (ret.text.length && 0 < this._outputs.length) {\n          var innerStr = 'OUTPUT ' + this._outputs.join(', ') + ' ';\n\n          var valuesPos = ret.text.indexOf('VALUES');\n\n          ret.text = ret.text.substr(0, valuesPos) + innerStr + ret.text.substr(valuesPos);\n        }\n\n        return ret;\n      }\n    }]);\n\n    return _class40;\n  }(cls.InsertFieldValueBlock);\n\n  cls.MssqlUpdateDeleteOutputBlock = function (_cls$Block17) {\n    _inherits(_class41, _cls$Block17);\n\n    function _class41(options) {\n      _classCallCheck(this, _class41);\n\n      var _this46 = _possibleConstructorReturn(this, (_class41.__proto__ || Object.getPrototypeOf(_class41)).call(this, options));\n\n      _this46._outputs = [];\n      return _this46;\n    }\n\n    /**\n    # Add the given fields to the final result set.\n    #\n    # The parameter is an Object containing field names (or database functions) as the keys and aliases for the fields\n    # as the values. If the value for a key is null then no alias is set for that field.\n    #\n    # Internally this method simply calls the field() method of this block to add each individual field.\n    */\n\n\n    _createClass(_class41, [{\n      key: 'outputs',\n      value: function outputs(_outputs) {\n        for (var output in _outputs) {\n          this.output(output, _outputs[output]);\n        }\n      }\n\n      /**\n      # Add the given field to the final result set.\n      #\n      # The 'field' parameter does not necessarily have to be a fieldname. It can use database functions too,\n      # e.g. DATE_FORMAT(a.started, \"%H\")\n      #\n      # An alias may also be specified for this field.\n      */\n\n    }, {\n      key: 'output',\n      value: function output(_output) {\n        var alias = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;\n\n        _output = this._sanitizeField(_output);\n        alias = alias ? this._sanitizeFieldAlias(alias) : alias;\n\n        this._outputs.push({\n          name: this.options.forDelete ? 'DELETED.' + _output : 'INSERTED.' + _output,\n          alias: alias\n        });\n      }\n    }, {\n      key: '_toParamString',\n      value: function _toParamString(queryBuilder) {\n        var totalStr = \"\";\n\n        if (this._outputs.length) {\n          var _iteratorNormalCompletion15 = true;\n          var _didIteratorError15 = false;\n          var _iteratorError15 = undefined;\n\n          try {\n            for (var _iterator15 = this._outputs[Symbol.iterator](), _step15; !(_iteratorNormalCompletion15 = (_step15 = _iterator15.next()).done); _iteratorNormalCompletion15 = true) {\n              var output = _step15.value;\n\n              totalStr = _pad(totalStr, \", \");\n\n              totalStr += output.name;\n\n              if (output.alias) {\n                totalStr += ' AS ' + this._formatFieldAlias(output.alias);\n              }\n            }\n          } catch (err) {\n            _didIteratorError15 = true;\n            _iteratorError15 = err;\n          } finally {\n            try {\n              if (!_iteratorNormalCompletion15 && _iterator15.return) {\n                _iterator15.return();\n              }\n            } finally {\n              if (_didIteratorError15) {\n                throw _iteratorError15;\n              }\n            }\n          }\n\n          totalStr = 'OUTPUT ' + totalStr;\n        }\n\n        return {\n          text: totalStr,\n          values: []\n        };\n      }\n    }]);\n\n    return _class41;\n  }(cls.Block);\n\n  // SELECT query builder.\n  cls.Select = function (_cls$QueryBuilder5) {\n    _inherits(_class42, _cls$QueryBuilder5);\n\n    function _class42(options) {\n      var blocks = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;\n\n      _classCallCheck(this, _class42);\n\n      var limitOffsetTopBlock = new cls.MssqlLimitOffsetTopBlock(options);\n\n      blocks = blocks || [new cls.StringBlock(options, 'SELECT'), new cls.DistinctBlock(options), limitOffsetTopBlock.TOP(), new cls.GetFieldBlock(options), new cls.FromTableBlock(options), new cls.JoinBlock(options), new cls.WhereBlock(options), new cls.GroupByBlock(options), new cls.OrderByBlock(options), limitOffsetTopBlock.OFFSET(), limitOffsetTopBlock.LIMIT(), new cls.UnionBlock(options)];\n\n      return _possibleConstructorReturn(this, (_class42.__proto__ || Object.getPrototypeOf(_class42)).call(this, options, blocks));\n    }\n\n    return _class42;\n  }(cls.QueryBuilder);\n\n  // Order By in update requires subquery\n\n  // UPDATE query builder.\n  cls.Update = function (_cls$QueryBuilder6) {\n    _inherits(_class43, _cls$QueryBuilder6);\n\n    function _class43(options) {\n      var blocks = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;\n\n      _classCallCheck(this, _class43);\n\n      blocks = blocks || [new cls.StringBlock(options, 'UPDATE'), new cls.MssqlUpdateTopBlock(options), new cls.UpdateTableBlock(options), new cls.SetFieldBlock(options), new cls.MssqlUpdateDeleteOutputBlock(options), new cls.WhereBlock(options)];\n\n      return _possibleConstructorReturn(this, (_class43.__proto__ || Object.getPrototypeOf(_class43)).call(this, options, blocks));\n    }\n\n    return _class43;\n  }(cls.QueryBuilder);\n\n  // Order By and Limit/Top in delete requires subquery\n\n  // DELETE query builder.\n  cls.Delete = function (_cls$QueryBuilder7) {\n    _inherits(_class44, _cls$QueryBuilder7);\n\n    function _class44(options) {\n      var blocks = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;\n\n      _classCallCheck(this, _class44);\n\n      blocks = blocks || [new cls.StringBlock(options, 'DELETE'), new cls.TargetTableBlock(options), new cls.FromTableBlock(_extend({}, options, { singleTable: true })), new cls.JoinBlock(options), new cls.MssqlUpdateDeleteOutputBlock(_extend({}, options, { forDelete: true })), new cls.WhereBlock(options), new cls.OrderByBlock(options), new cls.LimitBlock(options)];\n\n      return _possibleConstructorReturn(this, (_class44.__proto__ || Object.getPrototypeOf(_class44)).call(this, options, blocks));\n    }\n\n    return _class44;\n  }(cls.QueryBuilder);\n\n  // An INSERT query builder.\n  cls.Insert = function (_cls$QueryBuilder8) {\n    _inherits(_class45, _cls$QueryBuilder8);\n\n    function _class45(options) {\n      var blocks = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;\n\n      _classCallCheck(this, _class45);\n\n      blocks = blocks || [new cls.StringBlock(options, 'INSERT'), new cls.IntoTableBlock(options), new cls.MssqlInsertFieldValueBlock(options), new cls.InsertFieldsFromQueryBlock(options)];\n\n      return _possibleConstructorReturn(this, (_class45.__proto__ || Object.getPrototypeOf(_class45)).call(this, options, blocks));\n    }\n\n    return _class45;\n  }(cls.QueryBuilder);\n};\n\n// This file contains additional Squel commands for use with MySQL\n\nsquel.flavours['mysql'] = function (_squel) {\n  var cls = _squel.cls;\n\n  // ON DUPLICATE KEY UPDATE ...\n  cls.MysqlOnDuplicateKeyUpdateBlock = function (_cls$AbstractSetField3) {\n    _inherits(_class46, _cls$AbstractSetField3);\n\n    function _class46() {\n      _classCallCheck(this, _class46);\n\n      return _possibleConstructorReturn(this, (_class46.__proto__ || Object.getPrototypeOf(_class46)).apply(this, arguments));\n    }\n\n    _createClass(_class46, [{\n      key: 'onDupUpdate',\n      value: function onDupUpdate(field, value, options) {\n        this._set(field, value, options);\n      }\n    }, {\n      key: '_toParamString',\n      value: function _toParamString() {\n        var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n\n        var totalStr = \"\",\n            totalValues = [];\n\n        for (var i = 0; i < this._fields.length; ++i) {\n          totalStr = _pad(totalStr, ', ');\n\n          var field = this._fields[i];\n\n          var value = this._values[0][i];\n\n          var valueOptions = this._valueOptions[0][i];\n\n          // e.g. if field is an expression such as: count = count + 1\n          if (typeof value === 'undefined') {\n            totalStr += field;\n          } else {\n            var ret = this._buildString(field + ' = ' + this.options.parameterCharacter, [value], {\n              buildParameterized: options.buildParameterized,\n              formattingOptions: valueOptions\n            });\n\n            totalStr += ret.text;\n            ret.values.forEach(function (value) {\n              return totalValues.push(value);\n            });\n          }\n        }\n\n        return {\n          text: !totalStr.length ? \"\" : 'ON DUPLICATE KEY UPDATE ' + totalStr,\n          values: totalValues\n        };\n      }\n    }]);\n\n    return _class46;\n  }(cls.AbstractSetFieldBlock);\n\n  // INSERT query builder.\n  cls.Insert = function (_cls$QueryBuilder9) {\n    _inherits(_class47, _cls$QueryBuilder9);\n\n    function _class47(options) {\n      var blocks = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;\n\n      _classCallCheck(this, _class47);\n\n      blocks = blocks || [new cls.StringBlock(options, 'INSERT'), new cls.IntoTableBlock(options), new cls.InsertFieldValueBlock(options), new cls.InsertFieldsFromQueryBlock(options), new cls.MysqlOnDuplicateKeyUpdateBlock(options)];\n\n      return _possibleConstructorReturn(this, (_class47.__proto__ || Object.getPrototypeOf(_class47)).call(this, options, blocks));\n    }\n\n    return _class47;\n  }(cls.QueryBuilder);\n\n  // REPLACE query builder.\n  cls.Replace = function (_cls$QueryBuilder10) {\n    _inherits(_class48, _cls$QueryBuilder10);\n\n    function _class48(options) {\n      var blocks = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;\n\n      _classCallCheck(this, _class48);\n\n      blocks = blocks || [new cls.StringBlock(options, 'REPLACE'), new cls.IntoTableBlock(options), new cls.InsertFieldValueBlock(options), new cls.InsertFieldsFromQueryBlock(options)];\n\n      return _possibleConstructorReturn(this, (_class48.__proto__ || Object.getPrototypeOf(_class48)).call(this, options, blocks));\n    }\n\n    return _class48;\n  }(cls.QueryBuilder);\n\n  _squel.replace = function (options, blocks) {\n    return new cls.Replace(options, blocks);\n  };\n};\n\n// This file contains additional Squel commands for use with the Postgres DB engine\nsquel.flavours['postgres'] = function (_squel) {\n  var cls = _squel.cls;\n\n  cls.DefaultQueryBuilderOptions.numberedParameters = true;\n  cls.DefaultQueryBuilderOptions.numberedParametersStartAt = 1;\n  cls.DefaultQueryBuilderOptions.autoQuoteAliasNames = false;\n  cls.DefaultQueryBuilderOptions.useAsForTableAliasNames = true;\n\n  cls.PostgresOnConflictKeyUpdateBlock = function (_cls$AbstractSetField4) {\n    _inherits(_class49, _cls$AbstractSetField4);\n\n    function _class49() {\n      _classCallCheck(this, _class49);\n\n      return _possibleConstructorReturn(this, (_class49.__proto__ || Object.getPrototypeOf(_class49)).apply(this, arguments));\n    }\n\n    _createClass(_class49, [{\n      key: 'onConflict',\n      value: function onConflict(conflictFields, fields) {\n        var _this55 = this;\n\n        this._onConflict = true;\n        if (!conflictFields) {\n          return;\n        }\n        if (!_isArray(conflictFields)) {\n          conflictFields = [conflictFields];\n        }\n        this._dupFields = conflictFields.map(this._sanitizeField.bind(this));\n\n        if (fields) {\n          Object.keys(fields).forEach(function (key) {\n            _this55._set(key, fields[key]);\n          });\n        }\n      }\n    }, {\n      key: '_toParamString',\n      value: function _toParamString() {\n        var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n\n        var totalStr = \"\",\n            totalValues = [];\n\n        for (var i = 0; i < this._fields.length; ++i) {\n          totalStr = _pad(totalStr, ', ');\n\n          var field = this._fields[i];\n\n          var value = this._values[0][i];\n\n          var valueOptions = this._valueOptions[0][i];\n\n          // e.g. if field is an expression such as: count = count + 1\n          if (typeof value === 'undefined') {\n            totalStr += field;\n          } else {\n            var ret = this._buildString(field + ' = ' + this.options.parameterCharacter, [value], {\n              buildParameterized: options.buildParameterized,\n              formattingOptions: valueOptions\n            });\n\n            totalStr += ret.text;\n            ret.values.forEach(function (value) {\n              return totalValues.push(value);\n            });\n          }\n        }\n\n        var returned = {\n          text: '',\n          values: totalValues\n        };\n\n        if (this._onConflict) {\n          // note the trailing whitespace after the join\n          var conflictFields = this._dupFields ? '(' + this._dupFields.join(', ') + ') ' : '';\n          var action = totalStr.length ? 'UPDATE SET ' + totalStr : 'NOTHING';\n          returned.text = 'ON CONFLICT ' + conflictFields + 'DO ' + action;\n        }\n\n        return returned;\n      }\n    }]);\n\n    return _class49;\n  }(cls.AbstractSetFieldBlock);\n\n  // RETURNING\n  cls.ReturningBlock = function (_cls$Block18) {\n    _inherits(_class50, _cls$Block18);\n\n    function _class50(options) {\n      _classCallCheck(this, _class50);\n\n      var _this56 = _possibleConstructorReturn(this, (_class50.__proto__ || Object.getPrototypeOf(_class50)).call(this, options));\n\n      _this56._fields = [];\n      return _this56;\n    }\n\n    _createClass(_class50, [{\n      key: 'returning',\n      value: function returning(field) {\n        var alias = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;\n        var options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n\n        alias = alias ? this._sanitizeFieldAlias(alias) : alias;\n        field = this._sanitizeField(field);\n\n        // if field-alias combo already present then don't add\n        var existingField = this._fields.filter(function (f) {\n          return f.name === field && f.alias === alias;\n        });\n        if (existingField.length) {\n          return this;\n        }\n\n        this._fields.push({\n          name: field,\n          alias: alias,\n          options: options\n        });\n      }\n    }, {\n      key: '_toParamString',\n      value: function _toParamString() {\n        var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n        var queryBuilder = options.queryBuilder,\n            buildParameterized = options.buildParameterized;\n\n\n        var totalStr = '',\n            totalValues = [];\n\n        var _iteratorNormalCompletion16 = true;\n        var _didIteratorError16 = false;\n        var _iteratorError16 = undefined;\n\n        try {\n          for (var _iterator16 = this._fields[Symbol.iterator](), _step16; !(_iteratorNormalCompletion16 = (_step16 = _iterator16.next()).done); _iteratorNormalCompletion16 = true) {\n            var field = _step16.value;\n\n            totalStr = _pad(totalStr, \", \");\n\n            var name = field.name,\n                alias = field.alias,\n                _options2 = field.options;\n\n\n            if (typeof name === 'string') {\n              totalStr += this._formatFieldName(name, _options2);\n            } else {\n              var ret = name._toParamString({\n                nested: true,\n                buildParameterized: buildParameterized\n              });\n\n              totalStr += ret.text;\n              ret.values.forEach(function (value) {\n                return totalValues.push(value);\n              });\n            }\n\n            if (alias) {\n              totalStr += ' AS ' + this._formatFieldAlias(alias);\n            }\n          }\n        } catch (err) {\n          _didIteratorError16 = true;\n          _iteratorError16 = err;\n        } finally {\n          try {\n            if (!_iteratorNormalCompletion16 && _iterator16.return) {\n              _iterator16.return();\n            }\n          } finally {\n            if (_didIteratorError16) {\n              throw _iteratorError16;\n            }\n          }\n        }\n\n        return {\n          text: totalStr.length > 0 ? 'RETURNING ' + totalStr : '',\n          values: totalValues\n        };\n      }\n    }]);\n\n    return _class50;\n  }(cls.Block);\n\n  // WITH\n  cls.WithBlock = function (_cls$Block19) {\n    _inherits(_class51, _cls$Block19);\n\n    function _class51(options) {\n      _classCallCheck(this, _class51);\n\n      var _this57 = _possibleConstructorReturn(this, (_class51.__proto__ || Object.getPrototypeOf(_class51)).call(this, options));\n\n      _this57._tables = [];\n      return _this57;\n    }\n\n    _createClass(_class51, [{\n      key: 'with',\n      value: function _with(alias, table) {\n        this._tables.push({ alias: alias, table: table });\n      }\n    }, {\n      key: '_toParamString',\n      value: function _toParamString() {\n        var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n\n        var parts = [];\n        var values = [];\n\n        var _iteratorNormalCompletion17 = true;\n        var _didIteratorError17 = false;\n        var _iteratorError17 = undefined;\n\n        try {\n          for (var _iterator17 = this._tables[Symbol.iterator](), _step17; !(_iteratorNormalCompletion17 = (_step17 = _iterator17.next()).done); _iteratorNormalCompletion17 = true) {\n            var _step17$value = _step17.value,\n                alias = _step17$value.alias,\n                table = _step17$value.table;\n\n            var ret = table._toParamString({\n              buildParameterized: options.buildParameterized,\n              nested: true\n            });\n\n            parts.push(alias + ' AS ' + ret.text);\n            ret.values.forEach(function (value) {\n              return values.push(value);\n            });\n          }\n        } catch (err) {\n          _didIteratorError17 = true;\n          _iteratorError17 = err;\n        } finally {\n          try {\n            if (!_iteratorNormalCompletion17 && _iterator17.return) {\n              _iterator17.return();\n            }\n          } finally {\n            if (_didIteratorError17) {\n              throw _iteratorError17;\n            }\n          }\n        }\n\n        return {\n          text: parts.length ? 'WITH ' + parts.join(', ') : '',\n          values: values\n        };\n      }\n    }]);\n\n    return _class51;\n  }(cls.Block);\n\n  // DISTINCT [ON]\n  cls.DistinctOnBlock = function (_cls$Block20) {\n    _inherits(_class52, _cls$Block20);\n\n    function _class52(options) {\n      _classCallCheck(this, _class52);\n\n      var _this58 = _possibleConstructorReturn(this, (_class52.__proto__ || Object.getPrototypeOf(_class52)).call(this, options));\n\n      _this58._distinctFields = [];\n      return _this58;\n    }\n\n    _createClass(_class52, [{\n      key: 'distinct',\n      value: function distinct() {\n        var _this59 = this;\n\n        this._useDistinct = true;\n\n        // Add all fields to the DISTINCT ON clause.\n\n        for (var _len11 = arguments.length, fields = Array(_len11), _key11 = 0; _key11 < _len11; _key11++) {\n          fields[_key11] = arguments[_key11];\n        }\n\n        fields.forEach(function (field) {\n          _this59._distinctFields.push(_this59._sanitizeField(field));\n        });\n      }\n    }, {\n      key: '_toParamString',\n      value: function _toParamString() {\n        var text = '';\n\n        if (this._useDistinct) {\n          text = 'DISTINCT';\n\n          if (this._distinctFields.length) {\n            text += ' ON (' + this._distinctFields.join(', ') + ')';\n          }\n        }\n\n        return {\n          text: text,\n          values: []\n        };\n      }\n    }]);\n\n    return _class52;\n  }(cls.Block);\n\n  // SELECT query builder.\n  cls.Select = function (_cls$QueryBuilder11) {\n    _inherits(_class53, _cls$QueryBuilder11);\n\n    function _class53(options) {\n      var blocks = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;\n\n      _classCallCheck(this, _class53);\n\n      blocks = blocks || [new cls.WithBlock(options), new cls.StringBlock(options, 'SELECT'), new cls.FunctionBlock(options), new cls.DistinctOnBlock(options), new cls.GetFieldBlock(options), new cls.FromTableBlock(options), new cls.JoinBlock(options), new cls.WhereBlock(options), new cls.GroupByBlock(options), new cls.HavingBlock(options), new cls.OrderByBlock(options), new cls.LimitBlock(options), new cls.OffsetBlock(options), new cls.UnionBlock(options)];\n\n      return _possibleConstructorReturn(this, (_class53.__proto__ || Object.getPrototypeOf(_class53)).call(this, options, blocks));\n    }\n\n    return _class53;\n  }(cls.QueryBuilder);\n\n  // INSERT query builder\n  cls.Insert = function (_cls$QueryBuilder12) {\n    _inherits(_class54, _cls$QueryBuilder12);\n\n    function _class54(options) {\n      var blocks = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;\n\n      _classCallCheck(this, _class54);\n\n      blocks = blocks || [new cls.WithBlock(options), new cls.StringBlock(options, 'INSERT'), new cls.IntoTableBlock(options), new cls.InsertFieldValueBlock(options), new cls.InsertFieldsFromQueryBlock(options), new cls.PostgresOnConflictKeyUpdateBlock(options), new cls.ReturningBlock(options)];\n\n      return _possibleConstructorReturn(this, (_class54.__proto__ || Object.getPrototypeOf(_class54)).call(this, options, blocks));\n    }\n\n    return _class54;\n  }(cls.QueryBuilder);\n\n  // UPDATE query builder\n  cls.Update = function (_cls$QueryBuilder13) {\n    _inherits(_class55, _cls$QueryBuilder13);\n\n    function _class55(options) {\n      var blocks = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;\n\n      _classCallCheck(this, _class55);\n\n      blocks = blocks || [new cls.WithBlock(options), new cls.StringBlock(options, 'UPDATE'), new cls.UpdateTableBlock(options), new cls.SetFieldBlock(options), new cls.FromTableBlock(options), new cls.WhereBlock(options), new cls.OrderByBlock(options), new cls.LimitBlock(options), new cls.ReturningBlock(options)];\n\n      return _possibleConstructorReturn(this, (_class55.__proto__ || Object.getPrototypeOf(_class55)).call(this, options, blocks));\n    }\n\n    return _class55;\n  }(cls.QueryBuilder);\n\n  // DELETE query builder\n  cls.Delete = function (_cls$QueryBuilder14) {\n    _inherits(_class56, _cls$QueryBuilder14);\n\n    function _class56(options) {\n      var blocks = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;\n\n      _classCallCheck(this, _class56);\n\n      blocks = blocks || [new cls.WithBlock(options), new cls.StringBlock(options, 'DELETE'), new cls.TargetTableBlock(options), new cls.FromTableBlock(_extend({}, options, {\n        singleTable: true\n      })), new cls.JoinBlock(options), new cls.WhereBlock(options), new cls.OrderByBlock(options), new cls.LimitBlock(options), new cls.ReturningBlock(options)];\n\n      return _possibleConstructorReturn(this, (_class56.__proto__ || Object.getPrototypeOf(_class56)).call(this, options, blocks));\n    }\n\n    return _class56;\n  }(cls.QueryBuilder);\n};\nreturn squel;\n}));\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/squel/dist/squel.js\n// module id = 3\n// module chunks = 0"],"sourceRoot":""}